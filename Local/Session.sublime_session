{
	"folder_history":
	[
		"/home/matthias/projects/slt-final-project",
		"/home/matthias/projects/agdml-lab-project",
		"/home/matthias/projects/nlp-solver",
		"/home/matthias/Orga",
		"/home/matthias/projects/battleship",
		"/home/matthias/projects/zumbusch",
		"/home/matthias/projects/genosolver",
		"/home/matthias/zb",
		"/home/matthias/projects/hash-maps",
		"/home/matthias/projects/icml2019/src",
		"/home/matthias/projects/tmp",
		"/home/matthias/projects/zumbusch/projects/icml2019",
		"/home/matthias/projects/icml2019",
		"/home/matthias/tmp/meinProgramm",
		"/home/matthias/projects/lda/project1",
		"/home/matthias/projects/lab-project",
		"/home/matthias/projects/StatistischeLernverfahrenLab/project",
		"/home/matthias/projects/matrixCalculusPaper",
		"/home/matthias/projects/StatistischeLernverfahrenLab",
		"/home/matthias/projects/lbfgsb",
		"/home/matthias/projects/pycutest",
		"/home/matthias/projects/geno-samples",
		"/home/matthias/projects/pipgeno",
		"/home/matthias/projects/mastersolver",
		"/home/matthias/projects/pypi-publish",
		"/home/matthias/projects/optiview",
		"/home/matthias/projects/cython-callback",
		"/home/matthias/projects/mastersolver/src",
		"/home/matthias/projects/genosolver/src",
		"/home/matthias/projects/optidb",
		"/home/matthias/projects/mastersolver/src/solver",
		"/home/matthias/projects/series-05",
		"/home/matthias/projects/exercise-04",
		"/home/matthias/projects/series-04",
		"/home/matthias/projects/pygeno",
		"/home/matthias/projects/CUTEST.py",
		"/home/matthias/Downloads",
		"/home/matthias/projects/pycutest/pycutest",
		"/home/matthias/projects/genocore",
		"/home/matthias/projects/geno",
		"/home/matthias/projects/cmake",
		"/home/matthias/projects/cmake-tutorial",
		"/home/matthias/projects/cmake-master/Tests/Tutorial",
		"/home/matthias/projects/TensorFlow-benchmarks/python",
		"/home/matthias/projects/TensorFlow-benchmarks",
		"/home/matthias/projects/tensorbench",
		"/home/matthias/projects/series-03",
		"/home/matthias/projects/pythontmp",
		"/home/matthias/projects/genoapps/webserver",
		"/home/matthias/Settings",
		"/home/matthias/Downloads/Python-2.7.8",
		"/usr/share/unity"
	],
	"last_version": 3176,
	"last_window_id": 215,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 564.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"cmake",
						"cmake_minimum_required"
					],
					[
						"no_o",
						"no_overhead_erase"
					],
					[
						"er",
						"erases"
					],
					[
						"si",
						"size_type"
					],
					[
						"be",
						"begin"
					],
					[
						"key",
						"key_type"
					],
					[
						"stl_",
						"stl_hm"
					],
					[
						"boost",
						"boost_time"
					],
					[
						"stro",
						"stroupo_timestd"
					],
					[
						"boos",
						"boost_time"
					],
					[
						"diff",
						"diff_stroupo"
					],
					[
						"dif",
						"diff_stl"
					],
					[
						"uni",
						"unique"
					],
					[
						"ben",
						"benchAllSequentialInsertions"
					],
					[
						"tr",
						"trToPython"
					],
					[
						"trToPy",
						"trToPyfile"
					],
					[
						"Timin",
						"TimingResults"
					],
					[
						"file",
						"filename\tstatement"
					],
					[
						"Timi",
						"TimingResults"
					],
					[
						"timi",
						"timings"
					],
					[
						"seq",
						"sequentialInsert"
					],
					[
						"bos",
						"boost_hm"
					],
					[
						"vec",
						"vector\tstd::vector"
					],
					[
						"Hash",
						"HashMaps"
					],
					[
						"boo",
						"boost"
					],
					[
						"print",
						"print_container"
					],
					[
						"results",
						"results_boost"
					],
					[
						"fp_model",
						"fp_model_lda_model\tstatement"
					],
					[
						"ran",
						"random_state\tstatement"
					],
					[
						"fp",
						"fp_documents_cleaned\tstatement"
					],
					[
						"doc",
						"fp_documents_cleaned\tstatement"
					],
					[
						"data",
						"data_dir"
					],
					[
						"fin",
						"fibonacci_rek"
					],
					[
						"fi",
						"fibonacci_iter"
					],
					[
						"fib",
						"fibonacci_rek"
					],
					[
						"Has",
						"HashMap"
					],
					[
						"Ha",
						"HashNode"
					],
					[
						"CMAKE_CURR",
						"CMAKE_CURRENT_SOURCE_DIR"
					],
					[
						"real",
						"reallocateDown"
					],
					[
						"arr",
						"array_new"
					],
					[
						"get",
						"getCapacity"
					],
					[
						"nw",
						"new_f2\tstatement"
					],
					[
						"is",
						"isfile\tfunction"
					],
					[
						"de",
						"defaultdict\tclass"
					],
					[
						"load",
						"load_history\tfunction"
					],
					[
						"fp_",
						"fp_history\tparam"
					],
					[
						"main",
						"mainloop"
					],
					[
						"cre",
						"createTK\tfunction"
					],
					[
						"prfi",
						"profiler"
					],
					[
						"s_q",
						"s_qp_H\tstatement"
					],
					[
						"t_lr",
						"t_lr_H\tstatement"
					],
					[
						"t_q",
						"t_quad_fg\tstatement"
					],
					[
						"lr",
						"lr_fg_n\tstatement"
					],
					[
						"s",
						"s_quad_fg\tstatement"
					],
					[
						"dir",
						"dir_data\tparam"
					],
					[
						"gen",
						"genHaikuNick\tfunction"
					],
					[
						"FILE_SC",
						"FILE_SCORES\tstatement"
					],
					[
						"date",
						"datetime\tclass"
					],
					[
						"FILE",
						"FILE_NP_VALIDATE_IDX_FINAL\tstatement"
					],
					[
						"get_",
						"get_actual_predictions\tfunction"
					],
					[
						"idx_valid",
						"idx_validate\tstatement"
					],
					[
						"file_qu",
						"file_qualifying_blanc\tstatement"
					],
					[
						"idx_val",
						"idx_validate\tstatement"
					],
					[
						"idx_validate",
						"idx_validate_final\tstatement"
					],
					[
						"X_qu",
						"X_qualify\tstatement"
					],
					[
						"X_qua",
						"X_qualify_blanc\tstatement"
					],
					[
						"X_va",
						"X_validate\tstatement"
					],
					[
						"shar",
						"share_qualifying_final\tstatement"
					],
					[
						"app",
						"append\tfunction"
					],
					[
						"hig",
						"high_scores\tstatement"
					],
					[
						"high",
						"high_score\tstatement"
					],
					[
						"valida",
						"validate_file\tfunction"
					],
					[
						"W",
						"WebException\tclass"
					],
					[
						"array",
						"array_equal"
					],
					[
						"valid",
						"validate_user\tfunction"
					],
					[
						"get_us",
						"get_users\tfunction"
					],
					[
						"high_sc",
						"high_scores\tstatement"
					],
					[
						"get_user",
						"get_user_ranking\tfunction"
					],
					[
						"high_scores",
						"high_scores_user\tstatement"
					],
					[
						"hi",
						"high_score_user\tstatement"
					],
					[
						"high_sco",
						"high_score"
					],
					[
						"re",
						"reader\tfunction"
					],
					[
						"X",
						"X_act\tstatement"
					],
					[
						"cal",
						"calculate_rmse\tfunction"
					],
					[
						"DATA",
						"DIR_DATA\tstatement"
					],
					[
						"parse",
						"parse_file\tfunction"
					],
					[
						"X_vali",
						"X_validate_blanc\tstatement"
					],
					[
						"time",
						"timestamp\tstatement"
					],
					[
						"DAT",
						"DIR_DATA\tstatement"
					],
					[
						"dev",
						"device\tparam"
					],
					[
						"pyc",
						"pycutest\tmodule"
					],
					[
						"rang",
						"plot_ranges\tstatement"
					],
					[
						"qp",
						"qp2d\tstatement"
					],
					[
						"QP",
						"QP2D\tclass"
					],
					[
						"plo",
						"plot_ranges\tstatement"
					],
					[
						"latex",
						"latex_table\tstatement"
					],
					[
						"toH",
						"toHtmlString\tfunction"
					],
					[
						"iter_wor",
						"iter_worst_factor\tstatement"
					],
					[
						"iter_ma",
						"iter_master_factor\tstatement"
					],
					[
						"iter_m",
						"iter_master_factor\tstatement"
					],
					[
						"sol",
						"solved_f_vs_iter\tfunction"
					],
					[
						"rele",
						"rel_errs\tstatement"
					],
					[
						"rel_er",
						"rel_errs\tstatement"
					],
					[
						"csv",
						"csvdict_ipopt\tstatement"
					],
					[
						"solv",
						"solved_both\tstatement"
					],
					[
						"problem",
						"problem_name"
					],
					[
						"tab",
						"table_unsolved_ipopt_master\tfunction"
					],
					[
						"Ke",
						"KeyError\tclass"
					],
					[
						"solve",
						"solved_ipopt\tstatement"
					],
					[
						"stat",
						"stat_ipopt\tstatement"
					],
					[
						"h",
						"history\tstatement"
					],
					[
						"range",
						"ranges\tstatement"
					],
					[
						"eps",
						"eps_tsec\tstatement"
					],
					[
						"res",
						"result_header\tstatement"
					],
					[
						"head",
						"header_color\tstatement"
					],
					[
						"abs",
						"abs_errs\tstatement"
					],
					[
						"in",
						"indices\tstatement"
					],
					[
						"min",
						"minimum\tstatement"
					],
					[
						"buil",
						"build_header"
					],
					[
						"getPro",
						"getProblemProperties"
					],
					[
						"bul",
						"build_rows"
					],
					[
						"build",
						"build_row"
					],
					[
						"result",
						"result_header"
					],
					[
						"prob",
						"problem_header"
					],
					[
						"dic",
						"csv_dicts\tstatement"
					],
					[
						"class",
						"classmethod\tclass"
					],
					[
						"pro",
						"problems\tstatement"
					],
					[
						"geno",
						"genosolver\tmodule"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packages in",
						"Package Control: Install Package"
					],
					[
						"packages instal",
						"Package Control: Install Package"
					],
					[
						"packages",
						"Package Control: Install Package"
					],
					[
						"Package Control: r",
						"Package Control: Remove Package"
					],
					[
						"Package Control: ",
						"Package Control: Remove Package"
					],
					[
						"Package Control: remove",
						"Package Control: Remove Package"
					]
				],
				"width": 515.0
			},
			"console":
			{
				"height": 130.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/matthias/projects/graphbisection/readme.md",
				"/home/matthias/projects/absnf/readme.md",
				"/home/matthias/projects/testsuite-nocoding/README.md",
				"/home/matthias/projects/optiview/readme.md",
				"/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/home/matthias/zb/src/todo.todo",
				"/home/matthias/zb/src/gpu_tf_lr_H.py",
				"/home/matthias/zb/src/utils.py",
				"/home/matthias/zb/src/plots.py",
				"/home/matthias/zb/src/run.sh",
				"/home/matthias/zb/src/slurm.txt",
				"/home/matthias/zb/src/submit.sh",
				"/home/matthias/zb/src/test.sh",
				"/home/matthias/zb/src/gpu_tf_mf_H.py",
				"/home/matthias/zb/src/gpu_tf_mf_fg.py",
				"/home/matthias/zb/src/gpu_tf_lr_fg.py",
				"/home/matthias/zb/code/tf_fully_connected.py",
				"/home/matthias/zb/src/res.txt",
				"/home/matthias/projects/hash-maps/bench/plot.py",
				"/home/matthias/projects/hash-maps/bench/variadic_templates.cc",
				"/home/matthias/projects/hash-maps/main.cc",
				"/home/matthias/tmp/dt.cpp",
				"/home/matthias/projects/hash-maps/tests/hash_map.cc",
				"/home/matthias/projects/hash-maps/CMakeLists.txt",
				"/home/matthias/projects/hash-maps/hash_map/hash_map.h",
				"/home/matthias/projects/hash-maps/bench/bench2.cc",
				"/home/matthias/projects/lda/project1/src/learnmodel.py",
				"/home/matthias/Orga/songs.txt",
				"/home/matthias/Orga/cook.txt",
				"/home/matthias/Orga/movies.txt",
				"/home/matthias/Orga/lda.todo",
				"/home/matthias/Orga/todo.todo",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/Orga/versicherungen-abos.txt",
				"/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.cc",
				"/home/matthias/projects/algoen/self_exercise-02/CMakeLists.txt",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.h",
				"/home/matthias/projects/algoen/self_exercise-01/CMakeLists.txt",
				"/home/matthias/projects/test-runner/.gitlab-ci.yml",
				"/home/matthias/projects/algoen/self_exercise-02/.gitignore",
				"/home/matthias/Downloads/songs.txt",
				"/home/matthias/Downloads/youtube.sh",
				"/home/matthias/projects/codinginterviews/arraylist/readme.md",
				"/home/matthias/Orga/dis.txt",
				"/home/matthias/Orga/cuda_install.txt",
				"/home/matthias/projects/codinginterviews/hashtable/hashtable.cpp",
				"/home/matthias/projects/codinginterviews/tmp.cpp",
				"/home/matthias/projects/init/init.todo",
				"/home/matthias/projects/init/readme.md",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.h",
				"/home/matthias/projects/algoen/self_exercise-01/main.cc",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.h",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/CMakeLists.txt",
				"/home/matthias/projects/algoen/exercise-01/gemv.h",
				"/home/matthias/projects/algoen/exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/README.md",
				"/home/matthias/projects/algoen/exercise-01/.gitlab-ci.yml",
				"/home/matthias/projects/hello_cmake/src/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/CMakeLists.txt",
				"/home/matthias/projects/codinginterviews/arraylist/main.cpp",
				"/home/matthias/projects/codinginterviews/arraylist/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/hello.cpp",
				"/home/matthias/projects/hello_cmake/hello.h",
				"/home/matthias/projects/hello_cmake/testmain.cpp",
				"/home/matthias/projects/hello_cmake/tests/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/src/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt.old",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/include/catch.hpp",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.tpp",
				"/home/matthias/projects/hello_cmake/catch.hpp",
				"/home/matthias/projects/nlp/a1/q2_sigmoid.py",
				"/home/matthias/projects/nlp/a1/q2_gradcheck.py",
				"/home/matthias/projects/calvhobbes/test.py",
				"/home/matthias/projects/nlp/a1/q2_neural.py",
				"/home/matthias/projects/nlp/a1/q1_softmax.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNQualify.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionMean.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionBaseline.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrFullData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/qualify.csv",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/splitTrainTest.py",
				"/home/matthias/projects/codewars/c/decToBin.c",
				"/home/matthias/Orga/camping.txt",
				"/home/matthias/Orga/packliste.txt",
				"/home/matthias/projects/calvhobbes/show.py",
				"/home/matthias/projects/matrixCalculusPaper/code/pp.py",
				"/home/matthias/projects/codewars/c/decToBin.py",
				"/home/matthias/Orga/style.todo",
				"/home/matthias/Orga/wunschliste.txt",
				"/home/matthias/Orga/backup.txt",
				"/home/matthias/Orga/geschenke.txt",
				"/home/matthias/Orga/wardrobe.todo",
				"/home/matthias/Orga/wohnung.txt",
				"/home/matthias/Orga/music.txt",
				"/home/matthias/Orga/experimente.txt",
				"/home/matthias/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
				"/home/matthias/projects/AAAI2019/.gitignore",
				"/home/matthias/projects/AAAI2019/supplement.tex",
				"/home/matthias/projects/matrixCalculusPaper/code/utils.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/run.sh",
				"/media/matthias/6CEC-FFA4/OPENME.txt",
				"/home/matthias/Orga/todo_conflict-20180907-093316.txt",
				"/home/matthias/Orga/istrien.txt",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/aws/matrixCalculusPaper/code/utils.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_lr_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_pt_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_tf_qp_fg.py",
				"/home/matthias/Orga/todo.txt",
				"/home/matthias/projects/keras/convolution.py",
				"/home/matthias/projects/slt-final-project/README.md",
				"/home/matthias/projects/slt-final-project/webinterface/templates/documentation.html",
				"/home/matthias/projects/slt-final-project/webinterface/templates/tasks.html",
				"/home/matthias/Orga/todo_conflict-20180827-125630.txt",
				"/home/matthias/Orga/todo_conflict-20180826-211101.txt",
				"/home/matthias/projects/keras/keras-5.1-5.2-cats-and-dogs.py",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_mf_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_th_mf_fg.py"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 136.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 48.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"mas",
						"solver/master.csv"
					],
					[
						"master.csv",
						"solver/master.csv"
					],
					[
						"util",
						"solver/utils.py"
					],
					[
						"cre",
						"solver/create_result_table.py"
					],
					[
						"result",
						"solver/create_result_table.py"
					],
					[
						"ipop",
						"solver/ipopt.csv"
					],
					[
						"stat",
						"solver/statistics-table.py"
					],
					[
						"subs",
						"solver/subspace.py"
					],
					[
						"singl",
						"solver/single_problem.py"
					],
					[
						"table",
						"solver/create_result_table.py"
					],
					[
						"creat",
						"solver/create_result_table.py"
					],
					[
						"csv",
						"solver/csvmerger.py"
					],
					[
						"plot",
						"casual/plotter.py"
					],
					[
						"sol",
						"solver/solver.py"
					],
					[
						"sin",
						"solver/single_problem.py"
					],
					[
						"nl",
						"solver/nlp.py"
					],
					[
						"nlp",
						"solver/nlp.py"
					],
					[
						"solv",
						"solver/solver.py"
					],
					[
						"ut",
						"src/solver/utils.py"
					],
					[
						"cau",
						"solver/cauchy.py"
					],
					[
						"tm",
						"src/solver/tmp.py"
					],
					[
						"lbfgs",
						"src/lbfgsb.cpp"
					],
					[
						"augme",
						"src/augmentedLagrangian.cpp"
					],
					[
						"pygeno.pyx",
						"src/pygeno/pygeno.pyx"
					],
					[
						"pygenon",
						"src/pygeno/pygenonlp.cpp"
					],
					[
						"test",
						"optidb/test.py"
					],
					[
						"com",
						"pycutest/compiler.py"
					],
					[
						"cutest.",
						"pycutest/cutest.pyx"
					],
					[
						"too",
						"pycutest/tools.py"
					],
					[
						"problem",
						"pycutest/problem.py"
					],
					[
						"meta",
						"pycutest/meta/pycutestmeta.py"
					],
					[
						"pycu",
						"pycutest/pycutest.py"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 392.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 438.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 640.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"cmake",
						"cmake_minimum_required"
					],
					[
						"no_o",
						"no_overhead_erase"
					],
					[
						"er",
						"erases"
					],
					[
						"si",
						"size_type"
					],
					[
						"be",
						"begin"
					],
					[
						"key",
						"key_type"
					],
					[
						"stl_",
						"stl_hm"
					],
					[
						"boost",
						"boost_time"
					],
					[
						"stro",
						"stroupo_timestd"
					],
					[
						"boos",
						"boost_time"
					],
					[
						"diff",
						"diff_stroupo"
					],
					[
						"dif",
						"diff_stl"
					],
					[
						"uni",
						"unique"
					],
					[
						"ben",
						"benchAllSequentialInsertions"
					],
					[
						"tr",
						"trToPython"
					],
					[
						"trToPy",
						"trToPyfile"
					],
					[
						"Timin",
						"TimingResults"
					],
					[
						"file",
						"filename\tstatement"
					],
					[
						"Timi",
						"TimingResults"
					],
					[
						"timi",
						"timings"
					],
					[
						"seq",
						"sequentialInsert"
					],
					[
						"bos",
						"boost_hm"
					],
					[
						"vec",
						"vector\tstd::vector"
					],
					[
						"Hash",
						"HashMaps"
					],
					[
						"boo",
						"boost"
					],
					[
						"print",
						"print_container"
					],
					[
						"results",
						"results_boost"
					],
					[
						"fp_model",
						"fp_model_lda_model\tstatement"
					],
					[
						"ran",
						"random_state\tstatement"
					],
					[
						"fp",
						"fp_documents_cleaned\tstatement"
					],
					[
						"doc",
						"fp_documents_cleaned\tstatement"
					],
					[
						"data",
						"data_dir"
					],
					[
						"fin",
						"fibonacci_rek"
					],
					[
						"fi",
						"fibonacci_iter"
					],
					[
						"fib",
						"fibonacci_rek"
					],
					[
						"Has",
						"HashMap"
					],
					[
						"Ha",
						"HashNode"
					],
					[
						"CMAKE_CURR",
						"CMAKE_CURRENT_SOURCE_DIR"
					],
					[
						"real",
						"reallocateDown"
					],
					[
						"arr",
						"array_new"
					],
					[
						"get",
						"getCapacity"
					],
					[
						"nw",
						"new_f2\tstatement"
					],
					[
						"is",
						"isfile\tfunction"
					],
					[
						"de",
						"defaultdict\tclass"
					],
					[
						"load",
						"load_history\tfunction"
					],
					[
						"fp_",
						"fp_history\tparam"
					],
					[
						"main",
						"mainloop"
					],
					[
						"cre",
						"createTK\tfunction"
					],
					[
						"prfi",
						"profiler"
					],
					[
						"s_q",
						"s_qp_H\tstatement"
					],
					[
						"t_lr",
						"t_lr_H\tstatement"
					],
					[
						"t_q",
						"t_quad_fg\tstatement"
					],
					[
						"lr",
						"lr_fg_n\tstatement"
					],
					[
						"s",
						"s_quad_fg\tstatement"
					],
					[
						"dir",
						"dir_data\tparam"
					],
					[
						"gen",
						"genHaikuNick\tfunction"
					],
					[
						"FILE_SC",
						"FILE_SCORES\tstatement"
					],
					[
						"date",
						"datetime\tclass"
					],
					[
						"FILE",
						"FILE_NP_VALIDATE_IDX_FINAL\tstatement"
					],
					[
						"get_",
						"get_actual_predictions\tfunction"
					],
					[
						"idx_valid",
						"idx_validate\tstatement"
					],
					[
						"file_qu",
						"file_qualifying_blanc\tstatement"
					],
					[
						"idx_val",
						"idx_validate\tstatement"
					],
					[
						"idx_validate",
						"idx_validate_final\tstatement"
					],
					[
						"X_qu",
						"X_qualify\tstatement"
					],
					[
						"X_qua",
						"X_qualify_blanc\tstatement"
					],
					[
						"X_va",
						"X_validate\tstatement"
					],
					[
						"shar",
						"share_qualifying_final\tstatement"
					],
					[
						"app",
						"append\tfunction"
					],
					[
						"hig",
						"high_scores\tstatement"
					],
					[
						"high",
						"high_score\tstatement"
					],
					[
						"valida",
						"validate_file\tfunction"
					],
					[
						"W",
						"WebException\tclass"
					],
					[
						"array",
						"array_equal"
					],
					[
						"valid",
						"validate_user\tfunction"
					],
					[
						"get_us",
						"get_users\tfunction"
					],
					[
						"high_sc",
						"high_scores\tstatement"
					],
					[
						"get_user",
						"get_user_ranking\tfunction"
					],
					[
						"high_scores",
						"high_scores_user\tstatement"
					],
					[
						"hi",
						"high_score_user\tstatement"
					],
					[
						"high_sco",
						"high_score"
					],
					[
						"re",
						"reader\tfunction"
					],
					[
						"X",
						"X_act\tstatement"
					],
					[
						"cal",
						"calculate_rmse\tfunction"
					],
					[
						"DATA",
						"DIR_DATA\tstatement"
					],
					[
						"parse",
						"parse_file\tfunction"
					],
					[
						"X_vali",
						"X_validate_blanc\tstatement"
					],
					[
						"time",
						"timestamp\tstatement"
					],
					[
						"DAT",
						"DIR_DATA\tstatement"
					],
					[
						"dev",
						"device\tparam"
					],
					[
						"pyc",
						"pycutest\tmodule"
					],
					[
						"rang",
						"plot_ranges\tstatement"
					],
					[
						"qp",
						"qp2d\tstatement"
					],
					[
						"QP",
						"QP2D\tclass"
					],
					[
						"plo",
						"plot_ranges\tstatement"
					],
					[
						"latex",
						"latex_table\tstatement"
					],
					[
						"toH",
						"toHtmlString\tfunction"
					],
					[
						"iter_wor",
						"iter_worst_factor\tstatement"
					],
					[
						"iter_ma",
						"iter_master_factor\tstatement"
					],
					[
						"iter_m",
						"iter_master_factor\tstatement"
					],
					[
						"sol",
						"solved_f_vs_iter\tfunction"
					],
					[
						"rele",
						"rel_errs\tstatement"
					],
					[
						"rel_er",
						"rel_errs\tstatement"
					],
					[
						"csv",
						"csvdict_ipopt\tstatement"
					],
					[
						"solv",
						"solved_both\tstatement"
					],
					[
						"problem",
						"problem_name"
					],
					[
						"tab",
						"table_unsolved_ipopt_master\tfunction"
					],
					[
						"Ke",
						"KeyError\tclass"
					],
					[
						"solve",
						"solved_ipopt\tstatement"
					],
					[
						"stat",
						"stat_ipopt\tstatement"
					],
					[
						"h",
						"history\tstatement"
					],
					[
						"range",
						"ranges\tstatement"
					],
					[
						"eps",
						"eps_tsec\tstatement"
					],
					[
						"res",
						"result_header\tstatement"
					],
					[
						"head",
						"header_color\tstatement"
					],
					[
						"abs",
						"abs_errs\tstatement"
					],
					[
						"in",
						"indices\tstatement"
					],
					[
						"min",
						"minimum\tstatement"
					],
					[
						"buil",
						"build_header"
					],
					[
						"getPro",
						"getProblemProperties"
					],
					[
						"bul",
						"build_rows"
					],
					[
						"build",
						"build_row"
					],
					[
						"result",
						"result_header"
					],
					[
						"prob",
						"problem_header"
					],
					[
						"dic",
						"csv_dicts\tstatement"
					],
					[
						"class",
						"classmethod\tclass"
					],
					[
						"pro",
						"problems\tstatement"
					],
					[
						"geno",
						"genosolver\tmodule"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/matthias/Orga/todo.todo",
					"settings":
					{
						"buffer_size": 4447,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "from flask import Flask, render_template, request\nimport os\nimport csv\nimport datetime\nimport time\nimport numpy as np\n\napp = Flask(__name__)\n\n# limit file size limit for form submission in Bytes\napp.config['MAX_CONTENT_LENGTH'] = 9 * 1024 * 1024\n\nDIR_DATA = \"data\"\nFILE_USERS = \"users.csv\"\nFILE_USERS_STATS = \"stats.csv\"\nFILE_SCORES = \"scores.csv\"\nFILE_SCORES_FINAl = \"scores_final.csv\"\nFILE_VALIDATE = \"qualifying.csv\"\nFILE_NP_VALIDATE_IDX = \"qualifying_idx.npy\"\nFILE_NP_VALIDATE_IDX_FINAL = \"qualifying_idx_final.npy\"\n\nABS = os.path.dirname(os.path.abspath(__file__))\nDIR_DATA = os.path.join(ABS, DIR_DATA)\n\nCOMMITS_PER_HOUR = 5\n\nFINAL_VALIDATION_DATE = datetime.datetime(2019, 7, 30)\n# FINAL_VALIDATION_DATE = datetime.datetime.now()\n\n\nclass WebException(Exception):\n    def __init__(self, message):\n        super().__init__(message)\n        self.message = message\n\n\ndef get_users():\n    with open(os.path.join(DIR_DATA, FILE_USERS), \"r\") as file:\n        users = [(user, nick)\n                 for user, nick in csv.reader(file, delimiter=',')]\n        users, nicks = zip(*users)\n    return users, nicks\n\n\ndef get_scores(nick=None, format=True, allscores=False):\n    if FINAL_VALIDATION_DATE < datetime.datetime.now():\n        sf = FILE_SCORES_FINAl\n    else:\n        sf = FILE_SCORES\n    high_scores = []\n    high_score = np.inf\n    with open(os.path.join(DIR_DATA, sf), \"r\") as file:\n        reader = csv.reader(file)\n        for user, score, timestamp in reader:\n            if nick is not None and nick != user:\n                continue\n            if len(high_scores) == 0 or high_score >= score:\n                high_scores.append((score, timestamp))\n                high_score = score\n            elif allscores:\n                high_scores.append((score, timestamp))\n    if format:\n        high_score = \"{:0.3f}\".format(float(high_score))\n        high_scores = [(\"{:0.3f}\".format(float(s)), ts)\n                       for s, ts in high_scores]\n    return high_scores\n\n\ndef get_user_ranking(format=True):\n    if FINAL_VALIDATION_DATE < datetime.datetime.now():\n        sf = FILE_SCORES_FINAl\n    else:\n        sf = FILE_SCORES\n    users, nicks = get_users()\n    user_scores = {nick: np.inf for nick in nicks}\n    with open(os.path.join(DIR_DATA, sf), \"r\") as file:\n        reader = csv.reader(file)\n        for nick, score, timestamp in reader:\n            if float(user_scores[nick]) > float(score):\n                user_scores[nick] = score\n    ranking = sorted(user_scores.items(), key=lambda kv: float(kv[1]))\n    ranking = [(i + 1, nick, score) for i, (nick, score) in enumerate(ranking)]\n    if format:\n        ranking = [(r, n, \"{:0.3f}\".format(float(s))) for r, n, s in ranking]\n    return ranking\n\n\ndef add_score(user, score):\n    if FINAL_VALIDATION_DATE < datetime.datetime.now():\n        sf = FILE_SCORES_FINAl\n    else:\n        sf = FILE_SCORES\n    timestamp = time.time()\n    with open(os.path.join(DIR_DATA, sf), \"a\") as file:\n        writer = csv.writer(file)\n        writer.writerow([user, score, timestamp])\n\n\ndef calculate_rmse(X_act, X_exp):\n    if FINAL_VALIDATION_DATE < datetime.datetime.now():\n        idx = np.fromfile(os.path.join(\n            DIR_DATA, FILE_NP_VALIDATE_IDX_FINAL), dtype=np.int)\n    else:\n        idx = np.fromfile(os.path.join(\n            DIR_DATA, FILE_NP_VALIDATE_IDX), dtype=np.int)\n    X_act = X_act[idx]\n    X_exp = X_exp[idx]\n    return np.sqrt(((X_act[:, 2] - X_exp[:, 2]) ** 2).mean())\n\n\ndef get_actual_predictions():\n    X = np.genfromtxt(os.path.join(DIR_DATA, FILE_VALIDATE),\n                      delimiter=\",\", dtype=np.int)\n    X = X[np.lexsort((X[:, 0], X[:, 1]))]\n    return X\n\n\n@app.route('/about', methods=['GET'])\ndef about():\n    return render_template(\"about.html\")\n\n\n@app.route('/documentation', methods=['GET'])\ndef documentation():\n    return render_template(\"documentation.html\")\n\n\n@app.route('/tasks', methods=['GET'])\ndef tasks():\n    return render_template(\"tasks.html\")\n\n\n@app.route('/', methods=['GET'])\ndef index():\n    final_validation = False\n    if FINAL_VALIDATION_DATE < datetime.datetime.now():\n            final_validation = True\n    return render_template('home.html',\n                           high_scores=get_scores(),\n                           user_ranking=get_user_ranking(),\n                           final_validation=final_validation)\n\n\ndef validate_user(request):\n    users, nicks = get_users()\n    user = request.form.get('user')\n    if user not in users:\n        raise WebException(\"Invalid or missing user\")\n    nick = nicks[users.index(user)]\n    return nick\n\n\ndef validate_file(request):\n    file = request.files.get(\"file\")\n    if not file:\n        raise WebException(\"No file submitted!\")\n    try:\n        data = file.read().decode(\"utf-8\")\n    except UnicodeDecodeError:\n        raise WebException(\"Invalid encoding! Expecting utf-8!\")\n    X_exp = get_actual_predictions()\n    nrows, ncols = X_exp.shape\n    data = data.split(\"\\n\")\n    if data[-1] == '':\n        data = data[:-1]\n    data = [row.split(\",\") for row in data]\n    if len(data) != nrows or len(data[0]) != ncols:\n        raise WebException(\n            \"Invalid shape! Expecting ({:d}, {:d})\".format(nrows, ncols))\n    try:\n        X = np.array([[np.float(i) for i in row] for row in data])\n    except ValueError:\n        raise WebException(\"Invalid number format!\")\n    X = X[np.lexsort((X[:, 0], X[:, 1]))]\n    if not X_exp.shape == X.shape:\n        raise WebException(\n            \"Invalid shape 2! Expecting ({:d}, {:d})\".format(nrows, ncols))\n    if not np.array_equal(X[:, 0:2], X_exp[:, 0:2]):\n        raise WebException(\"You must submit the right predictions!\")\n    return X, X_exp\n\n\ndef validate_file_content(X_act, X_exp):\n    if not X_act.shape == X_exp.shape:\n        raise WebException(\"Invalid shape!\")\n    if not np.array_equal(X_act[:, 0:2], X_exp[:, 0:2]):\n        raise WebException(\"You must submit the right predictions!\")\n\n\ndef can_submit(nick):\n    scores = get_scores(nick, allscores=True)\n    if not scores:\n        return\n    t1 = time.time()\n    t0 = 0\n    scores, times = zip(*scores)\n    if len(times) > COMMITS_PER_HOUR:\n        t0 = float(times[-COMMITS_PER_HOUR])\n    if t1 - t0 < 3600:\n        td = 3600 - int(t1 - t0)\n        hms = str(datetime.timedelta(seconds=td))\n        raise WebException(\"You can submit again in {:0>8} hours!\".format(hms))\n\n\n@app.route('/upload', methods=['POST'])\ndef file_submission():\n    final_validation = False\n    try:\n        nick = validate_user(request)\n        X_act, X_exp = validate_file(request)\n        score = calculate_rmse(X_act, X_exp)\n        can_submit(nick)\n        add_score(nick, score)\n        score = \"{:0.3f}\".format(score)\n        if FINAL_VALIDATION_DATE < datetime.datetime.now():\n            final_validation = True\n    except WebException as e:\n        return render_template('home.html',\n                               errmsg=e.message,\n                               high_scores=get_scores(),\n                               user_ranking=get_user_ranking(),\n                               final_validation=final_validation)\n    else:\n        return render_template('home.html',\n                               score=score,\n                               high_scores=get_scores(),\n                               user_ranking=get_user_ranking(),\n                               final_validation=final_validation)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n",
					"file": "/home/matthias/projects/agdml-lab-project/webinterface.py",
					"file_size": 7430,
					"file_write_time": 131897393066393298,
					"settings":
					{
						"buffer_size": 7430,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "# Statistical Learning Theory - Lab\n\nContains the result submission portal of the final project.",
					"file": "/home/matthias/projects/agdml-lab-project/readme.md",
					"file_size": 96,
					"file_write_time": 131897394010675144,
					"settings":
					{
						"buffer_size": 96,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "*\n!*/\n!*.py\n!*.csv\n!*.npy\n!*.css\n!*.map\n!*.png\n!*.js\n!*.html\n!*.ipynb\n!*.md\n!.gitignore",
					"file": "/home/matthias/projects/agdml-lab-project/.gitignore",
					"file_size": 87,
					"file_write_time": 131897396887964351,
					"settings":
					{
						"buffer_size": 87,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "*\n!*/\n!*.py\n!*.html\n!*.csv\n!*.md\n!.gitignore",
					"file": "/home/matthias/projects/nlp-solver/.gitignore",
					"file_size": 44,
					"file_write_time": 131897400204897906,
					"settings":
					{
						"buffer_size": 44,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/matthias/projects/hash-maps/.gitignore",
					"settings":
					{
						"buffer_size": 97,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Eötvös Loránd University \n\ngeneral higher education entrance qualification",
					"settings":
					{
						"buffer_size": 74,
						"line_ending": "Unix",
						"name": "Eötvös Loránd University"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packages in",
						"Package Control: Install Package"
					],
					[
						"packages instal",
						"Package Control: Install Package"
					],
					[
						"packages",
						"Package Control: Install Package"
					],
					[
						"Package Control: r",
						"Package Control: Remove Package"
					],
					[
						"Package Control: ",
						"Package Control: Remove Package"
					],
					[
						"Package Control: remove",
						"Package Control: Remove Package"
					]
				],
				"width": 515.0
			},
			"console":
			{
				"height": 130.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/matthias/Orga"
			],
			"file_history":
			[
				"/home/matthias/projects/agdml-lab-project/utils/createUserNames.py",
				"/home/matthias/projects/graphbisection/readme.md",
				"/home/matthias/projects/absnf/readme.md",
				"/home/matthias/projects/testsuite-nocoding/README.md",
				"/home/matthias/projects/optiview/readme.md",
				"/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/home/matthias/zb/src/todo.todo",
				"/home/matthias/zb/src/gpu_tf_lr_H.py",
				"/home/matthias/zb/src/utils.py",
				"/home/matthias/zb/src/plots.py",
				"/home/matthias/zb/src/run.sh",
				"/home/matthias/zb/src/slurm.txt",
				"/home/matthias/zb/src/submit.sh",
				"/home/matthias/zb/src/test.sh",
				"/home/matthias/zb/src/gpu_tf_mf_H.py",
				"/home/matthias/zb/src/gpu_tf_mf_fg.py",
				"/home/matthias/zb/src/gpu_tf_lr_fg.py",
				"/home/matthias/zb/code/tf_fully_connected.py",
				"/home/matthias/zb/src/res.txt",
				"/home/matthias/projects/hash-maps/bench/plot.py",
				"/home/matthias/projects/hash-maps/bench/variadic_templates.cc",
				"/home/matthias/projects/hash-maps/main.cc",
				"/home/matthias/tmp/dt.cpp",
				"/home/matthias/projects/hash-maps/tests/hash_map.cc",
				"/home/matthias/projects/hash-maps/CMakeLists.txt",
				"/home/matthias/projects/hash-maps/hash_map/hash_map.h",
				"/home/matthias/projects/hash-maps/bench/bench2.cc",
				"/home/matthias/projects/lda/project1/src/learnmodel.py",
				"/home/matthias/Orga/songs.txt",
				"/home/matthias/Orga/cook.txt",
				"/home/matthias/Orga/movies.txt",
				"/home/matthias/Orga/lda.todo",
				"/home/matthias/Orga/todo.todo",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/Orga/versicherungen-abos.txt",
				"/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.cc",
				"/home/matthias/projects/algoen/self_exercise-02/CMakeLists.txt",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.h",
				"/home/matthias/projects/algoen/self_exercise-01/CMakeLists.txt",
				"/home/matthias/projects/test-runner/.gitlab-ci.yml",
				"/home/matthias/projects/algoen/self_exercise-02/.gitignore",
				"/home/matthias/Downloads/songs.txt",
				"/home/matthias/Downloads/youtube.sh",
				"/home/matthias/projects/codinginterviews/arraylist/readme.md",
				"/home/matthias/Orga/dis.txt",
				"/home/matthias/Orga/cuda_install.txt",
				"/home/matthias/projects/codinginterviews/hashtable/hashtable.cpp",
				"/home/matthias/projects/codinginterviews/tmp.cpp",
				"/home/matthias/projects/init/init.todo",
				"/home/matthias/projects/init/readme.md",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.h",
				"/home/matthias/projects/algoen/self_exercise-01/main.cc",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.h",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/CMakeLists.txt",
				"/home/matthias/projects/algoen/exercise-01/gemv.h",
				"/home/matthias/projects/algoen/exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/README.md",
				"/home/matthias/projects/algoen/exercise-01/.gitlab-ci.yml",
				"/home/matthias/projects/hello_cmake/src/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/CMakeLists.txt",
				"/home/matthias/projects/codinginterviews/arraylist/main.cpp",
				"/home/matthias/projects/codinginterviews/arraylist/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/hello.cpp",
				"/home/matthias/projects/hello_cmake/hello.h",
				"/home/matthias/projects/hello_cmake/testmain.cpp",
				"/home/matthias/projects/hello_cmake/tests/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/src/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt.old",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/include/catch.hpp",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.tpp",
				"/home/matthias/projects/hello_cmake/catch.hpp",
				"/home/matthias/projects/nlp/a1/q2_sigmoid.py",
				"/home/matthias/projects/nlp/a1/q2_gradcheck.py",
				"/home/matthias/projects/calvhobbes/test.py",
				"/home/matthias/projects/nlp/a1/q2_neural.py",
				"/home/matthias/projects/nlp/a1/q1_softmax.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNQualify.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionMean.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionBaseline.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrFullData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/qualify.csv",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/splitTrainTest.py",
				"/home/matthias/projects/codewars/c/decToBin.c",
				"/home/matthias/Orga/camping.txt",
				"/home/matthias/Orga/packliste.txt",
				"/home/matthias/projects/calvhobbes/show.py",
				"/home/matthias/projects/matrixCalculusPaper/code/pp.py",
				"/home/matthias/projects/codewars/c/decToBin.py",
				"/home/matthias/Orga/style.todo",
				"/home/matthias/Orga/wunschliste.txt",
				"/home/matthias/Orga/backup.txt",
				"/home/matthias/Orga/geschenke.txt",
				"/home/matthias/Orga/wardrobe.todo",
				"/home/matthias/Orga/wohnung.txt",
				"/home/matthias/Orga/music.txt",
				"/home/matthias/Orga/experimente.txt",
				"/home/matthias/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
				"/home/matthias/projects/AAAI2019/.gitignore",
				"/home/matthias/projects/AAAI2019/supplement.tex",
				"/home/matthias/projects/matrixCalculusPaper/code/utils.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/run.sh",
				"/media/matthias/6CEC-FFA4/OPENME.txt",
				"/home/matthias/Orga/todo_conflict-20180907-093316.txt",
				"/home/matthias/Orga/istrien.txt",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/aws/matrixCalculusPaper/code/utils.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_lr_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_pt_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_tf_qp_fg.py",
				"/home/matthias/Orga/todo.txt",
				"/home/matthias/projects/keras/convolution.py",
				"/home/matthias/projects/slt-final-project/README.md",
				"/home/matthias/projects/slt-final-project/webinterface/templates/documentation.html",
				"/home/matthias/projects/slt-final-project/webinterface/templates/tasks.html",
				"/home/matthias/Orga/todo_conflict-20180827-125630.txt",
				"/home/matthias/Orga/todo_conflict-20180826-211101.txt",
				"/home/matthias/projects/keras/keras-5.1-5.2-cats-and-dogs.py",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_mf_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_qp_fg.py"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 136.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/matthias/Orga"
				}
			],
			"groups":
			[
				{
					"selected": 4,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/matthias/Orga/todo.todo",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4447,
								"regions":
								{
								},
								"selection":
								[
									[
										1265,
										1265
									]
								],
								"settings":
								{
									"plain_tasks_remain_time_phantoms":
									[
									],
									"syntax": "Packages/PlainTasks/PlainTasks.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 240.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/matthias/projects/agdml-lab-project/webinterface.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7430,
								"regions":
								{
								},
								"selection":
								[
									[
										681,
										681
									]
								],
								"settings":
								{
									"syntax": "Packages/Python/Python.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/matthias/projects/agdml-lab-project/readme.md",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 96,
								"regions":
								{
								},
								"selection":
								[
									[
										38,
										38
									]
								],
								"settings":
								{
									"syntax": "Packages/Markdown/Markdown.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/matthias/projects/agdml-lab-project/.gitignore",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 87,
								"regions":
								{
								},
								"selection":
								[
									[
										5,
										5
									]
								],
								"settings":
								{
									"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/matthias/projects/nlp-solver/.gitignore",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 44,
								"regions":
								{
								},
								"selection":
								[
									[
										44,
										44
									]
								],
								"settings":
								{
									"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/matthias/projects/hash-maps/.gitignore",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 97,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 6,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 74,
								"regions":
								{
								},
								"selection":
								[
									[
										27,
										27
									]
								],
								"settings":
								{
									"auto_name": "Eötvös Loránd University",
									"default_dir": "/home/matthias/Orga",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 48.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,24,640,560,1920,1080",
			"project": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"mas",
						"solver/master.csv"
					],
					[
						"master.csv",
						"solver/master.csv"
					],
					[
						"util",
						"solver/utils.py"
					],
					[
						"cre",
						"solver/create_result_table.py"
					],
					[
						"result",
						"solver/create_result_table.py"
					],
					[
						"ipop",
						"solver/ipopt.csv"
					],
					[
						"stat",
						"solver/statistics-table.py"
					],
					[
						"subs",
						"solver/subspace.py"
					],
					[
						"singl",
						"solver/single_problem.py"
					],
					[
						"table",
						"solver/create_result_table.py"
					],
					[
						"creat",
						"solver/create_result_table.py"
					],
					[
						"csv",
						"solver/csvmerger.py"
					],
					[
						"plot",
						"casual/plotter.py"
					],
					[
						"sol",
						"solver/solver.py"
					],
					[
						"sin",
						"solver/single_problem.py"
					],
					[
						"nl",
						"solver/nlp.py"
					],
					[
						"nlp",
						"solver/nlp.py"
					],
					[
						"solv",
						"solver/solver.py"
					],
					[
						"ut",
						"src/solver/utils.py"
					],
					[
						"cau",
						"solver/cauchy.py"
					],
					[
						"tm",
						"src/solver/tmp.py"
					],
					[
						"lbfgs",
						"src/lbfgsb.cpp"
					],
					[
						"augme",
						"src/augmentedLagrangian.cpp"
					],
					[
						"pygeno.pyx",
						"src/pygeno/pygeno.pyx"
					],
					[
						"pygenon",
						"src/pygeno/pygenonlp.cpp"
					],
					[
						"test",
						"optidb/test.py"
					],
					[
						"com",
						"pycutest/compiler.py"
					],
					[
						"cutest.",
						"pycutest/cutest.pyx"
					],
					[
						"too",
						"pycutest/tools.py"
					],
					[
						"problem",
						"pycutest/problem.py"
					],
					[
						"meta",
						"pycutest/meta/pycutestmeta.py"
					],
					[
						"pycu",
						"pycutest/pycutest.py"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 392.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 438.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 212,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
