{
	"folder_history":
	[
		"/home/matthias/projects/slt-final-project",
		"/home/matthias/projects/agdml-lab-project",
		"/home/matthias/projects/nlp-solver",
		"/home/matthias/Orga",
		"/home/matthias/projects/battleship",
		"/home/matthias/projects/zumbusch",
		"/home/matthias/projects/genosolver",
		"/home/matthias/zb",
		"/home/matthias/projects/hash-maps",
		"/home/matthias/projects/icml2019/src",
		"/home/matthias/projects/tmp",
		"/home/matthias/projects/zumbusch/projects/icml2019",
		"/home/matthias/projects/icml2019",
		"/home/matthias/tmp/meinProgramm",
		"/home/matthias/projects/lda/project1",
		"/home/matthias/projects/lab-project",
		"/home/matthias/projects/StatistischeLernverfahrenLab/project",
		"/home/matthias/projects/matrixCalculusPaper",
		"/home/matthias/projects/StatistischeLernverfahrenLab",
		"/home/matthias/projects/lbfgsb",
		"/home/matthias/projects/pycutest",
		"/home/matthias/projects/geno-samples",
		"/home/matthias/projects/pipgeno",
		"/home/matthias/projects/mastersolver",
		"/home/matthias/projects/pypi-publish",
		"/home/matthias/projects/optiview",
		"/home/matthias/projects/cython-callback",
		"/home/matthias/projects/mastersolver/src",
		"/home/matthias/projects/genosolver/src",
		"/home/matthias/projects/optidb",
		"/home/matthias/projects/mastersolver/src/solver",
		"/home/matthias/projects/series-05",
		"/home/matthias/projects/exercise-04",
		"/home/matthias/projects/series-04",
		"/home/matthias/projects/pygeno",
		"/home/matthias/projects/CUTEST.py",
		"/home/matthias/Downloads",
		"/home/matthias/projects/pycutest/pycutest",
		"/home/matthias/projects/genocore",
		"/home/matthias/projects/geno",
		"/home/matthias/projects/cmake",
		"/home/matthias/projects/cmake-tutorial",
		"/home/matthias/projects/cmake-master/Tests/Tutorial",
		"/home/matthias/projects/TensorFlow-benchmarks/python",
		"/home/matthias/projects/TensorFlow-benchmarks",
		"/home/matthias/projects/tensorbench",
		"/home/matthias/projects/series-03",
		"/home/matthias/projects/pythontmp",
		"/home/matthias/projects/genoapps/webserver",
		"/home/matthias/Settings",
		"/home/matthias/Downloads/Python-2.7.8",
		"/usr/share/unity"
	],
	"last_version": 3176,
	"last_window_id": 216,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"cmake",
						"cmake_minimum_required"
					],
					[
						"no_o",
						"no_overhead_erase"
					],
					[
						"er",
						"erases"
					],
					[
						"si",
						"size_type"
					],
					[
						"be",
						"begin"
					],
					[
						"key",
						"key_type"
					],
					[
						"stl_",
						"stl_hm"
					],
					[
						"boost",
						"boost_time"
					],
					[
						"stro",
						"stroupo_timestd"
					],
					[
						"boos",
						"boost_time"
					],
					[
						"diff",
						"diff_stroupo"
					],
					[
						"dif",
						"diff_stl"
					],
					[
						"uni",
						"unique"
					],
					[
						"ben",
						"benchAllSequentialInsertions"
					],
					[
						"tr",
						"trToPython"
					],
					[
						"trToPy",
						"trToPyfile"
					],
					[
						"Timin",
						"TimingResults"
					],
					[
						"file",
						"filename\tstatement"
					],
					[
						"Timi",
						"TimingResults"
					],
					[
						"timi",
						"timings"
					],
					[
						"seq",
						"sequentialInsert"
					],
					[
						"bos",
						"boost_hm"
					],
					[
						"vec",
						"vector\tstd::vector"
					],
					[
						"Hash",
						"HashMaps"
					],
					[
						"boo",
						"boost"
					],
					[
						"print",
						"print_container"
					],
					[
						"results",
						"results_boost"
					],
					[
						"fp_model",
						"fp_model_lda_model\tstatement"
					],
					[
						"ran",
						"random_state\tstatement"
					],
					[
						"fp",
						"fp_documents_cleaned\tstatement"
					],
					[
						"doc",
						"fp_documents_cleaned\tstatement"
					],
					[
						"data",
						"data_dir"
					],
					[
						"fin",
						"fibonacci_rek"
					],
					[
						"fi",
						"fibonacci_iter"
					],
					[
						"fib",
						"fibonacci_rek"
					],
					[
						"Has",
						"HashMap"
					],
					[
						"Ha",
						"HashNode"
					],
					[
						"CMAKE_CURR",
						"CMAKE_CURRENT_SOURCE_DIR"
					],
					[
						"real",
						"reallocateDown"
					],
					[
						"arr",
						"array_new"
					],
					[
						"get",
						"getCapacity"
					],
					[
						"nw",
						"new_f2\tstatement"
					],
					[
						"is",
						"isfile\tfunction"
					],
					[
						"de",
						"defaultdict\tclass"
					],
					[
						"load",
						"load_history\tfunction"
					],
					[
						"fp_",
						"fp_history\tparam"
					],
					[
						"main",
						"mainloop"
					],
					[
						"cre",
						"createTK\tfunction"
					],
					[
						"prfi",
						"profiler"
					],
					[
						"s_q",
						"s_qp_H\tstatement"
					],
					[
						"t_lr",
						"t_lr_H\tstatement"
					],
					[
						"t_q",
						"t_quad_fg\tstatement"
					],
					[
						"lr",
						"lr_fg_n\tstatement"
					],
					[
						"s",
						"s_quad_fg\tstatement"
					],
					[
						"dir",
						"dir_data\tparam"
					],
					[
						"gen",
						"genHaikuNick\tfunction"
					],
					[
						"FILE_SC",
						"FILE_SCORES\tstatement"
					],
					[
						"date",
						"datetime\tclass"
					],
					[
						"FILE",
						"FILE_NP_VALIDATE_IDX_FINAL\tstatement"
					],
					[
						"get_",
						"get_actual_predictions\tfunction"
					],
					[
						"idx_valid",
						"idx_validate\tstatement"
					],
					[
						"file_qu",
						"file_qualifying_blanc\tstatement"
					],
					[
						"idx_val",
						"idx_validate\tstatement"
					],
					[
						"idx_validate",
						"idx_validate_final\tstatement"
					],
					[
						"X_qu",
						"X_qualify\tstatement"
					],
					[
						"X_qua",
						"X_qualify_blanc\tstatement"
					],
					[
						"X_va",
						"X_validate\tstatement"
					],
					[
						"shar",
						"share_qualifying_final\tstatement"
					],
					[
						"app",
						"append\tfunction"
					],
					[
						"hig",
						"high_scores\tstatement"
					],
					[
						"high",
						"high_score\tstatement"
					],
					[
						"valida",
						"validate_file\tfunction"
					],
					[
						"W",
						"WebException\tclass"
					],
					[
						"array",
						"array_equal"
					],
					[
						"valid",
						"validate_user\tfunction"
					],
					[
						"get_us",
						"get_users\tfunction"
					],
					[
						"high_sc",
						"high_scores\tstatement"
					],
					[
						"get_user",
						"get_user_ranking\tfunction"
					],
					[
						"high_scores",
						"high_scores_user\tstatement"
					],
					[
						"hi",
						"high_score_user\tstatement"
					],
					[
						"high_sco",
						"high_score"
					],
					[
						"re",
						"reader\tfunction"
					],
					[
						"X",
						"X_act\tstatement"
					],
					[
						"cal",
						"calculate_rmse\tfunction"
					],
					[
						"DATA",
						"DIR_DATA\tstatement"
					],
					[
						"parse",
						"parse_file\tfunction"
					],
					[
						"X_vali",
						"X_validate_blanc\tstatement"
					],
					[
						"time",
						"timestamp\tstatement"
					],
					[
						"DAT",
						"DIR_DATA\tstatement"
					],
					[
						"dev",
						"device\tparam"
					],
					[
						"pyc",
						"pycutest\tmodule"
					],
					[
						"rang",
						"plot_ranges\tstatement"
					],
					[
						"qp",
						"qp2d\tstatement"
					],
					[
						"QP",
						"QP2D\tclass"
					],
					[
						"plo",
						"plot_ranges\tstatement"
					],
					[
						"latex",
						"latex_table\tstatement"
					],
					[
						"toH",
						"toHtmlString\tfunction"
					],
					[
						"iter_wor",
						"iter_worst_factor\tstatement"
					],
					[
						"iter_ma",
						"iter_master_factor\tstatement"
					],
					[
						"iter_m",
						"iter_master_factor\tstatement"
					],
					[
						"sol",
						"solved_f_vs_iter\tfunction"
					],
					[
						"rele",
						"rel_errs\tstatement"
					],
					[
						"rel_er",
						"rel_errs\tstatement"
					],
					[
						"csv",
						"csvdict_ipopt\tstatement"
					],
					[
						"solv",
						"solved_both\tstatement"
					],
					[
						"problem",
						"problem_name"
					],
					[
						"tab",
						"table_unsolved_ipopt_master\tfunction"
					],
					[
						"Ke",
						"KeyError\tclass"
					],
					[
						"solve",
						"solved_ipopt\tstatement"
					],
					[
						"stat",
						"stat_ipopt\tstatement"
					],
					[
						"h",
						"history\tstatement"
					],
					[
						"range",
						"ranges\tstatement"
					],
					[
						"eps",
						"eps_tsec\tstatement"
					],
					[
						"res",
						"result_header\tstatement"
					],
					[
						"head",
						"header_color\tstatement"
					],
					[
						"abs",
						"abs_errs\tstatement"
					],
					[
						"in",
						"indices\tstatement"
					],
					[
						"min",
						"minimum\tstatement"
					],
					[
						"buil",
						"build_header"
					],
					[
						"getPro",
						"getProblemProperties"
					],
					[
						"bul",
						"build_rows"
					],
					[
						"build",
						"build_row"
					],
					[
						"result",
						"result_header"
					],
					[
						"prob",
						"problem_header"
					],
					[
						"dic",
						"csv_dicts\tstatement"
					],
					[
						"class",
						"classmethod\tclass"
					],
					[
						"pro",
						"problems\tstatement"
					],
					[
						"geno",
						"genosolver\tmodule"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packages in",
						"Package Control: Install Package"
					],
					[
						"packages instal",
						"Package Control: Install Package"
					],
					[
						"packages",
						"Package Control: Install Package"
					],
					[
						"Package Control: r",
						"Package Control: Remove Package"
					],
					[
						"Package Control: ",
						"Package Control: Remove Package"
					],
					[
						"Package Control: remove",
						"Package Control: Remove Package"
					]
				],
				"width": 515.0
			},
			"console":
			{
				"height": 130.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/matthias/projects/hash-maps/.gitignore",
				"/home/matthias/projects/agdml-lab-project/webinterface.py",
				"/home/matthias/projects/agdml-lab-project/readme.md",
				"/home/matthias/projects/agdml-lab-project/.gitignore",
				"/home/matthias/projects/nlp-solver/.gitignore",
				"/home/matthias/projects/CV/.gitignore",
				"/home/matthias/projects/agdml-lab-project/utils/createUserNames.py",
				"/home/matthias/projects/graphbisection/readme.md",
				"/home/matthias/projects/absnf/readme.md",
				"/home/matthias/projects/testsuite-nocoding/README.md",
				"/home/matthias/projects/optiview/readme.md",
				"/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/home/matthias/zb/src/todo.todo",
				"/home/matthias/zb/src/gpu_tf_lr_H.py",
				"/home/matthias/zb/src/utils.py",
				"/home/matthias/zb/src/plots.py",
				"/home/matthias/zb/src/run.sh",
				"/home/matthias/zb/src/slurm.txt",
				"/home/matthias/zb/src/submit.sh",
				"/home/matthias/zb/src/test.sh",
				"/home/matthias/zb/src/gpu_tf_mf_H.py",
				"/home/matthias/zb/src/gpu_tf_mf_fg.py",
				"/home/matthias/zb/src/gpu_tf_lr_fg.py",
				"/home/matthias/zb/code/tf_fully_connected.py",
				"/home/matthias/zb/src/res.txt",
				"/home/matthias/projects/hash-maps/bench/plot.py",
				"/home/matthias/projects/hash-maps/bench/variadic_templates.cc",
				"/home/matthias/projects/hash-maps/main.cc",
				"/home/matthias/tmp/dt.cpp",
				"/home/matthias/projects/hash-maps/tests/hash_map.cc",
				"/home/matthias/projects/hash-maps/CMakeLists.txt",
				"/home/matthias/projects/hash-maps/hash_map/hash_map.h",
				"/home/matthias/projects/hash-maps/bench/bench2.cc",
				"/home/matthias/projects/lda/project1/src/learnmodel.py",
				"/home/matthias/Orga/songs.txt",
				"/home/matthias/Orga/cook.txt",
				"/home/matthias/Orga/movies.txt",
				"/home/matthias/Orga/lda.todo",
				"/home/matthias/Orga/todo.todo",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/Orga/versicherungen-abos.txt",
				"/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.cc",
				"/home/matthias/projects/algoen/self_exercise-02/CMakeLists.txt",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.h",
				"/home/matthias/projects/algoen/self_exercise-01/CMakeLists.txt",
				"/home/matthias/projects/test-runner/.gitlab-ci.yml",
				"/home/matthias/projects/algoen/self_exercise-02/.gitignore",
				"/home/matthias/Downloads/songs.txt",
				"/home/matthias/Downloads/youtube.sh",
				"/home/matthias/projects/codinginterviews/arraylist/readme.md",
				"/home/matthias/Orga/dis.txt",
				"/home/matthias/Orga/cuda_install.txt",
				"/home/matthias/projects/codinginterviews/hashtable/hashtable.cpp",
				"/home/matthias/projects/codinginterviews/tmp.cpp",
				"/home/matthias/projects/init/init.todo",
				"/home/matthias/projects/init/readme.md",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.h",
				"/home/matthias/projects/algoen/self_exercise-01/main.cc",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.h",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/CMakeLists.txt",
				"/home/matthias/projects/algoen/exercise-01/gemv.h",
				"/home/matthias/projects/algoen/exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/README.md",
				"/home/matthias/projects/algoen/exercise-01/.gitlab-ci.yml",
				"/home/matthias/projects/hello_cmake/src/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/CMakeLists.txt",
				"/home/matthias/projects/codinginterviews/arraylist/main.cpp",
				"/home/matthias/projects/codinginterviews/arraylist/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/hello.cpp",
				"/home/matthias/projects/hello_cmake/hello.h",
				"/home/matthias/projects/hello_cmake/testmain.cpp",
				"/home/matthias/projects/hello_cmake/tests/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/src/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt.old",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/include/catch.hpp",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.tpp",
				"/home/matthias/projects/hello_cmake/catch.hpp",
				"/home/matthias/projects/nlp/a1/q2_sigmoid.py",
				"/home/matthias/projects/nlp/a1/q2_gradcheck.py",
				"/home/matthias/projects/calvhobbes/test.py",
				"/home/matthias/projects/nlp/a1/q2_neural.py",
				"/home/matthias/projects/nlp/a1/q1_softmax.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNQualify.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionMean.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionBaseline.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrFullData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/qualify.csv",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/splitTrainTest.py",
				"/home/matthias/projects/codewars/c/decToBin.c",
				"/home/matthias/Orga/camping.txt",
				"/home/matthias/Orga/packliste.txt",
				"/home/matthias/projects/calvhobbes/show.py",
				"/home/matthias/projects/matrixCalculusPaper/code/pp.py",
				"/home/matthias/projects/codewars/c/decToBin.py",
				"/home/matthias/Orga/style.todo",
				"/home/matthias/Orga/wunschliste.txt",
				"/home/matthias/Orga/backup.txt",
				"/home/matthias/Orga/geschenke.txt",
				"/home/matthias/Orga/wardrobe.todo",
				"/home/matthias/Orga/wohnung.txt",
				"/home/matthias/Orga/music.txt",
				"/home/matthias/Orga/experimente.txt",
				"/home/matthias/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
				"/home/matthias/projects/AAAI2019/.gitignore",
				"/home/matthias/projects/AAAI2019/supplement.tex",
				"/home/matthias/projects/matrixCalculusPaper/code/utils.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/run.sh",
				"/media/matthias/6CEC-FFA4/OPENME.txt",
				"/home/matthias/Orga/todo_conflict-20180907-093316.txt",
				"/home/matthias/Orga/istrien.txt",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/aws/matrixCalculusPaper/code/utils.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_lr_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_pt_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_tf_qp_fg.py",
				"/home/matthias/Orga/todo.txt",
				"/home/matthias/projects/keras/convolution.py",
				"/home/matthias/projects/slt-final-project/README.md",
				"/home/matthias/projects/slt-final-project/webinterface/templates/documentation.html",
				"/home/matthias/projects/slt-final-project/webinterface/templates/tasks.html"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 136.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"gitignore"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 48.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"mas",
						"solver/master.csv"
					],
					[
						"master.csv",
						"solver/master.csv"
					],
					[
						"util",
						"solver/utils.py"
					],
					[
						"cre",
						"solver/create_result_table.py"
					],
					[
						"result",
						"solver/create_result_table.py"
					],
					[
						"ipop",
						"solver/ipopt.csv"
					],
					[
						"stat",
						"solver/statistics-table.py"
					],
					[
						"subs",
						"solver/subspace.py"
					],
					[
						"singl",
						"solver/single_problem.py"
					],
					[
						"table",
						"solver/create_result_table.py"
					],
					[
						"creat",
						"solver/create_result_table.py"
					],
					[
						"csv",
						"solver/csvmerger.py"
					],
					[
						"plot",
						"casual/plotter.py"
					],
					[
						"sol",
						"solver/solver.py"
					],
					[
						"sin",
						"solver/single_problem.py"
					],
					[
						"nl",
						"solver/nlp.py"
					],
					[
						"nlp",
						"solver/nlp.py"
					],
					[
						"solv",
						"solver/solver.py"
					],
					[
						"ut",
						"src/solver/utils.py"
					],
					[
						"cau",
						"solver/cauchy.py"
					],
					[
						"tm",
						"src/solver/tmp.py"
					],
					[
						"lbfgs",
						"src/lbfgsb.cpp"
					],
					[
						"augme",
						"src/augmentedLagrangian.cpp"
					],
					[
						"pygeno.pyx",
						"src/pygeno/pygeno.pyx"
					],
					[
						"pygenon",
						"src/pygeno/pygenonlp.cpp"
					],
					[
						"test",
						"optidb/test.py"
					],
					[
						"com",
						"pycutest/compiler.py"
					],
					[
						"cutest.",
						"pycutest/cutest.pyx"
					],
					[
						"too",
						"pycutest/tools.py"
					],
					[
						"problem",
						"pycutest/problem.py"
					],
					[
						"meta",
						"pycutest/meta/pycutestmeta.py"
					],
					[
						"pycu",
						"pycutest/pycutest.py"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 392.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 438.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"cmake",
						"cmake_minimum_required"
					],
					[
						"no_o",
						"no_overhead_erase"
					],
					[
						"er",
						"erases"
					],
					[
						"si",
						"size_type"
					],
					[
						"be",
						"begin"
					],
					[
						"key",
						"key_type"
					],
					[
						"stl_",
						"stl_hm"
					],
					[
						"boost",
						"boost_time"
					],
					[
						"stro",
						"stroupo_timestd"
					],
					[
						"boos",
						"boost_time"
					],
					[
						"diff",
						"diff_stroupo"
					],
					[
						"dif",
						"diff_stl"
					],
					[
						"uni",
						"unique"
					],
					[
						"ben",
						"benchAllSequentialInsertions"
					],
					[
						"tr",
						"trToPython"
					],
					[
						"trToPy",
						"trToPyfile"
					],
					[
						"Timin",
						"TimingResults"
					],
					[
						"file",
						"filename\tstatement"
					],
					[
						"Timi",
						"TimingResults"
					],
					[
						"timi",
						"timings"
					],
					[
						"seq",
						"sequentialInsert"
					],
					[
						"bos",
						"boost_hm"
					],
					[
						"vec",
						"vector\tstd::vector"
					],
					[
						"Hash",
						"HashMaps"
					],
					[
						"boo",
						"boost"
					],
					[
						"print",
						"print_container"
					],
					[
						"results",
						"results_boost"
					],
					[
						"fp_model",
						"fp_model_lda_model\tstatement"
					],
					[
						"ran",
						"random_state\tstatement"
					],
					[
						"fp",
						"fp_documents_cleaned\tstatement"
					],
					[
						"doc",
						"fp_documents_cleaned\tstatement"
					],
					[
						"data",
						"data_dir"
					],
					[
						"fin",
						"fibonacci_rek"
					],
					[
						"fi",
						"fibonacci_iter"
					],
					[
						"fib",
						"fibonacci_rek"
					],
					[
						"Has",
						"HashMap"
					],
					[
						"Ha",
						"HashNode"
					],
					[
						"CMAKE_CURR",
						"CMAKE_CURRENT_SOURCE_DIR"
					],
					[
						"real",
						"reallocateDown"
					],
					[
						"arr",
						"array_new"
					],
					[
						"get",
						"getCapacity"
					],
					[
						"nw",
						"new_f2\tstatement"
					],
					[
						"is",
						"isfile\tfunction"
					],
					[
						"de",
						"defaultdict\tclass"
					],
					[
						"load",
						"load_history\tfunction"
					],
					[
						"fp_",
						"fp_history\tparam"
					],
					[
						"main",
						"mainloop"
					],
					[
						"cre",
						"createTK\tfunction"
					],
					[
						"prfi",
						"profiler"
					],
					[
						"s_q",
						"s_qp_H\tstatement"
					],
					[
						"t_lr",
						"t_lr_H\tstatement"
					],
					[
						"t_q",
						"t_quad_fg\tstatement"
					],
					[
						"lr",
						"lr_fg_n\tstatement"
					],
					[
						"s",
						"s_quad_fg\tstatement"
					],
					[
						"dir",
						"dir_data\tparam"
					],
					[
						"gen",
						"genHaikuNick\tfunction"
					],
					[
						"FILE_SC",
						"FILE_SCORES\tstatement"
					],
					[
						"date",
						"datetime\tclass"
					],
					[
						"FILE",
						"FILE_NP_VALIDATE_IDX_FINAL\tstatement"
					],
					[
						"get_",
						"get_actual_predictions\tfunction"
					],
					[
						"idx_valid",
						"idx_validate\tstatement"
					],
					[
						"file_qu",
						"file_qualifying_blanc\tstatement"
					],
					[
						"idx_val",
						"idx_validate\tstatement"
					],
					[
						"idx_validate",
						"idx_validate_final\tstatement"
					],
					[
						"X_qu",
						"X_qualify\tstatement"
					],
					[
						"X_qua",
						"X_qualify_blanc\tstatement"
					],
					[
						"X_va",
						"X_validate\tstatement"
					],
					[
						"shar",
						"share_qualifying_final\tstatement"
					],
					[
						"app",
						"append\tfunction"
					],
					[
						"hig",
						"high_scores\tstatement"
					],
					[
						"high",
						"high_score\tstatement"
					],
					[
						"valida",
						"validate_file\tfunction"
					],
					[
						"W",
						"WebException\tclass"
					],
					[
						"array",
						"array_equal"
					],
					[
						"valid",
						"validate_user\tfunction"
					],
					[
						"get_us",
						"get_users\tfunction"
					],
					[
						"high_sc",
						"high_scores\tstatement"
					],
					[
						"get_user",
						"get_user_ranking\tfunction"
					],
					[
						"high_scores",
						"high_scores_user\tstatement"
					],
					[
						"hi",
						"high_score_user\tstatement"
					],
					[
						"high_sco",
						"high_score"
					],
					[
						"re",
						"reader\tfunction"
					],
					[
						"X",
						"X_act\tstatement"
					],
					[
						"cal",
						"calculate_rmse\tfunction"
					],
					[
						"DATA",
						"DIR_DATA\tstatement"
					],
					[
						"parse",
						"parse_file\tfunction"
					],
					[
						"X_vali",
						"X_validate_blanc\tstatement"
					],
					[
						"time",
						"timestamp\tstatement"
					],
					[
						"DAT",
						"DIR_DATA\tstatement"
					],
					[
						"dev",
						"device\tparam"
					],
					[
						"pyc",
						"pycutest\tmodule"
					],
					[
						"rang",
						"plot_ranges\tstatement"
					],
					[
						"qp",
						"qp2d\tstatement"
					],
					[
						"QP",
						"QP2D\tclass"
					],
					[
						"plo",
						"plot_ranges\tstatement"
					],
					[
						"latex",
						"latex_table\tstatement"
					],
					[
						"toH",
						"toHtmlString\tfunction"
					],
					[
						"iter_wor",
						"iter_worst_factor\tstatement"
					],
					[
						"iter_ma",
						"iter_master_factor\tstatement"
					],
					[
						"iter_m",
						"iter_master_factor\tstatement"
					],
					[
						"sol",
						"solved_f_vs_iter\tfunction"
					],
					[
						"rele",
						"rel_errs\tstatement"
					],
					[
						"rel_er",
						"rel_errs\tstatement"
					],
					[
						"csv",
						"csvdict_ipopt\tstatement"
					],
					[
						"solv",
						"solved_both\tstatement"
					],
					[
						"problem",
						"problem_name"
					],
					[
						"tab",
						"table_unsolved_ipopt_master\tfunction"
					],
					[
						"Ke",
						"KeyError\tclass"
					],
					[
						"solve",
						"solved_ipopt\tstatement"
					],
					[
						"stat",
						"stat_ipopt\tstatement"
					],
					[
						"h",
						"history\tstatement"
					],
					[
						"range",
						"ranges\tstatement"
					],
					[
						"eps",
						"eps_tsec\tstatement"
					],
					[
						"res",
						"result_header\tstatement"
					],
					[
						"head",
						"header_color\tstatement"
					],
					[
						"abs",
						"abs_errs\tstatement"
					],
					[
						"in",
						"indices\tstatement"
					],
					[
						"min",
						"minimum\tstatement"
					],
					[
						"buil",
						"build_header"
					],
					[
						"getPro",
						"getProblemProperties"
					],
					[
						"bul",
						"build_rows"
					],
					[
						"build",
						"build_row"
					],
					[
						"result",
						"result_header"
					],
					[
						"prob",
						"problem_header"
					],
					[
						"dic",
						"csv_dicts\tstatement"
					],
					[
						"class",
						"classmethod\tclass"
					],
					[
						"pro",
						"problems\tstatement"
					],
					[
						"geno",
						"genosolver\tmodule"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/matthias/Orga/todo.todo",
					"settings":
					{
						"buffer_size": 4157,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packages in",
						"Package Control: Install Package"
					],
					[
						"packages instal",
						"Package Control: Install Package"
					],
					[
						"packages",
						"Package Control: Install Package"
					],
					[
						"Package Control: r",
						"Package Control: Remove Package"
					],
					[
						"Package Control: ",
						"Package Control: Remove Package"
					],
					[
						"Package Control: remove",
						"Package Control: Remove Package"
					]
				],
				"width": 515.0
			},
			"console":
			{
				"height": 130.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/matthias/Orga"
			],
			"file_history":
			[
				"/home/matthias/projects/hash-maps/.gitignore",
				"/home/matthias/projects/agdml-lab-project/webinterface.py",
				"/home/matthias/projects/agdml-lab-project/readme.md",
				"/home/matthias/projects/agdml-lab-project/.gitignore",
				"/home/matthias/projects/nlp-solver/.gitignore",
				"/home/matthias/projects/CV/.gitignore",
				"/home/matthias/projects/agdml-lab-project/utils/createUserNames.py",
				"/home/matthias/projects/graphbisection/readme.md",
				"/home/matthias/projects/absnf/readme.md",
				"/home/matthias/projects/testsuite-nocoding/README.md",
				"/home/matthias/projects/optiview/readme.md",
				"/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/home/matthias/zb/src/todo.todo",
				"/home/matthias/zb/src/gpu_tf_lr_H.py",
				"/home/matthias/zb/src/utils.py",
				"/home/matthias/zb/src/plots.py",
				"/home/matthias/zb/src/run.sh",
				"/home/matthias/zb/src/slurm.txt",
				"/home/matthias/zb/src/submit.sh",
				"/home/matthias/zb/src/test.sh",
				"/home/matthias/zb/src/gpu_tf_mf_H.py",
				"/home/matthias/zb/src/gpu_tf_mf_fg.py",
				"/home/matthias/zb/src/gpu_tf_lr_fg.py",
				"/home/matthias/zb/code/tf_fully_connected.py",
				"/home/matthias/zb/src/res.txt",
				"/home/matthias/projects/hash-maps/bench/plot.py",
				"/home/matthias/projects/hash-maps/bench/variadic_templates.cc",
				"/home/matthias/projects/hash-maps/main.cc",
				"/home/matthias/tmp/dt.cpp",
				"/home/matthias/projects/hash-maps/tests/hash_map.cc",
				"/home/matthias/projects/hash-maps/CMakeLists.txt",
				"/home/matthias/projects/hash-maps/hash_map/hash_map.h",
				"/home/matthias/projects/hash-maps/bench/bench2.cc",
				"/home/matthias/projects/lda/project1/src/learnmodel.py",
				"/home/matthias/Orga/songs.txt",
				"/home/matthias/Orga/cook.txt",
				"/home/matthias/Orga/movies.txt",
				"/home/matthias/Orga/lda.todo",
				"/home/matthias/Orga/todo.todo",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/Orga/versicherungen-abos.txt",
				"/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.cc",
				"/home/matthias/projects/algoen/self_exercise-02/CMakeLists.txt",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.h",
				"/home/matthias/projects/algoen/self_exercise-01/CMakeLists.txt",
				"/home/matthias/projects/test-runner/.gitlab-ci.yml",
				"/home/matthias/projects/algoen/self_exercise-02/.gitignore",
				"/home/matthias/Downloads/songs.txt",
				"/home/matthias/Downloads/youtube.sh",
				"/home/matthias/projects/codinginterviews/arraylist/readme.md",
				"/home/matthias/Orga/dis.txt",
				"/home/matthias/Orga/cuda_install.txt",
				"/home/matthias/projects/codinginterviews/hashtable/hashtable.cpp",
				"/home/matthias/projects/codinginterviews/tmp.cpp",
				"/home/matthias/projects/init/init.todo",
				"/home/matthias/projects/init/readme.md",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.h",
				"/home/matthias/projects/algoen/self_exercise-01/main.cc",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.h",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/CMakeLists.txt",
				"/home/matthias/projects/algoen/exercise-01/gemv.h",
				"/home/matthias/projects/algoen/exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/README.md",
				"/home/matthias/projects/algoen/exercise-01/.gitlab-ci.yml",
				"/home/matthias/projects/hello_cmake/src/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/CMakeLists.txt",
				"/home/matthias/projects/codinginterviews/arraylist/main.cpp",
				"/home/matthias/projects/codinginterviews/arraylist/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/hello.cpp",
				"/home/matthias/projects/hello_cmake/hello.h",
				"/home/matthias/projects/hello_cmake/testmain.cpp",
				"/home/matthias/projects/hello_cmake/tests/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/src/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt.old",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/include/catch.hpp",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.tpp",
				"/home/matthias/projects/hello_cmake/catch.hpp",
				"/home/matthias/projects/nlp/a1/q2_sigmoid.py",
				"/home/matthias/projects/nlp/a1/q2_gradcheck.py",
				"/home/matthias/projects/calvhobbes/test.py",
				"/home/matthias/projects/nlp/a1/q2_neural.py",
				"/home/matthias/projects/nlp/a1/q1_softmax.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNQualify.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionMean.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionBaseline.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrFullData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/qualify.csv",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/splitTrainTest.py",
				"/home/matthias/projects/codewars/c/decToBin.c",
				"/home/matthias/Orga/camping.txt",
				"/home/matthias/Orga/packliste.txt",
				"/home/matthias/projects/calvhobbes/show.py",
				"/home/matthias/projects/matrixCalculusPaper/code/pp.py",
				"/home/matthias/projects/codewars/c/decToBin.py",
				"/home/matthias/Orga/style.todo",
				"/home/matthias/Orga/wunschliste.txt",
				"/home/matthias/Orga/backup.txt",
				"/home/matthias/Orga/geschenke.txt",
				"/home/matthias/Orga/wardrobe.todo",
				"/home/matthias/Orga/wohnung.txt",
				"/home/matthias/Orga/music.txt",
				"/home/matthias/Orga/experimente.txt",
				"/home/matthias/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
				"/home/matthias/projects/AAAI2019/.gitignore",
				"/home/matthias/projects/AAAI2019/supplement.tex",
				"/home/matthias/projects/matrixCalculusPaper/code/utils.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/run.sh",
				"/media/matthias/6CEC-FFA4/OPENME.txt",
				"/home/matthias/Orga/todo_conflict-20180907-093316.txt",
				"/home/matthias/Orga/istrien.txt",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/aws/matrixCalculusPaper/code/utils.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_lr_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_pt_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_tf_qp_fg.py",
				"/home/matthias/Orga/todo.txt",
				"/home/matthias/projects/keras/convolution.py",
				"/home/matthias/projects/slt-final-project/README.md",
				"/home/matthias/projects/slt-final-project/webinterface/templates/documentation.html",
				"/home/matthias/projects/slt-final-project/webinterface/templates/tasks.html"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 136.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"gitignore"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/matthias/Orga"
				}
			],
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/matthias/Orga/todo.todo",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4157,
								"regions":
								{
								},
								"selection":
								[
									[
										799,
										799
									]
								],
								"settings":
								{
									"plain_tasks_remain_time_phantoms":
									[
									],
									"syntax": "Packages/PlainTasks/PlainTasks.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 365.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 48.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,0,0,0,1920,1080",
			"project": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"mas",
						"solver/master.csv"
					],
					[
						"master.csv",
						"solver/master.csv"
					],
					[
						"util",
						"solver/utils.py"
					],
					[
						"cre",
						"solver/create_result_table.py"
					],
					[
						"result",
						"solver/create_result_table.py"
					],
					[
						"ipop",
						"solver/ipopt.csv"
					],
					[
						"stat",
						"solver/statistics-table.py"
					],
					[
						"subs",
						"solver/subspace.py"
					],
					[
						"singl",
						"solver/single_problem.py"
					],
					[
						"table",
						"solver/create_result_table.py"
					],
					[
						"creat",
						"solver/create_result_table.py"
					],
					[
						"csv",
						"solver/csvmerger.py"
					],
					[
						"plot",
						"casual/plotter.py"
					],
					[
						"sol",
						"solver/solver.py"
					],
					[
						"sin",
						"solver/single_problem.py"
					],
					[
						"nl",
						"solver/nlp.py"
					],
					[
						"nlp",
						"solver/nlp.py"
					],
					[
						"solv",
						"solver/solver.py"
					],
					[
						"ut",
						"src/solver/utils.py"
					],
					[
						"cau",
						"solver/cauchy.py"
					],
					[
						"tm",
						"src/solver/tmp.py"
					],
					[
						"lbfgs",
						"src/lbfgsb.cpp"
					],
					[
						"augme",
						"src/augmentedLagrangian.cpp"
					],
					[
						"pygeno.pyx",
						"src/pygeno/pygeno.pyx"
					],
					[
						"pygenon",
						"src/pygeno/pygenonlp.cpp"
					],
					[
						"test",
						"optidb/test.py"
					],
					[
						"com",
						"pycutest/compiler.py"
					],
					[
						"cutest.",
						"pycutest/cutest.pyx"
					],
					[
						"too",
						"pycutest/tools.py"
					],
					[
						"problem",
						"pycutest/problem.py"
					],
					[
						"meta",
						"pycutest/meta/pycutestmeta.py"
					],
					[
						"pycu",
						"pycutest/pycutest.py"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 392.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 438.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 212,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"cmake",
						"cmake_minimum_required"
					],
					[
						"no_o",
						"no_overhead_erase"
					],
					[
						"er",
						"erases"
					],
					[
						"si",
						"size_type"
					],
					[
						"be",
						"begin"
					],
					[
						"key",
						"key_type"
					],
					[
						"stl_",
						"stl_hm"
					],
					[
						"boost",
						"boost_time"
					],
					[
						"stro",
						"stroupo_timestd"
					],
					[
						"boos",
						"boost_time"
					],
					[
						"diff",
						"diff_stroupo"
					],
					[
						"dif",
						"diff_stl"
					],
					[
						"uni",
						"unique"
					],
					[
						"ben",
						"benchAllSequentialInsertions"
					],
					[
						"tr",
						"trToPython"
					],
					[
						"trToPy",
						"trToPyfile"
					],
					[
						"Timin",
						"TimingResults"
					],
					[
						"file",
						"filename\tstatement"
					],
					[
						"Timi",
						"TimingResults"
					],
					[
						"timi",
						"timings"
					],
					[
						"seq",
						"sequentialInsert"
					],
					[
						"bos",
						"boost_hm"
					],
					[
						"vec",
						"vector\tstd::vector"
					],
					[
						"Hash",
						"HashMaps"
					],
					[
						"boo",
						"boost"
					],
					[
						"print",
						"print_container"
					],
					[
						"results",
						"results_boost"
					],
					[
						"fp_model",
						"fp_model_lda_model\tstatement"
					],
					[
						"ran",
						"random_state\tstatement"
					],
					[
						"fp",
						"fp_documents_cleaned\tstatement"
					],
					[
						"doc",
						"fp_documents_cleaned\tstatement"
					],
					[
						"data",
						"data_dir"
					],
					[
						"fin",
						"fibonacci_rek"
					],
					[
						"fi",
						"fibonacci_iter"
					],
					[
						"fib",
						"fibonacci_rek"
					],
					[
						"Has",
						"HashMap"
					],
					[
						"Ha",
						"HashNode"
					],
					[
						"CMAKE_CURR",
						"CMAKE_CURRENT_SOURCE_DIR"
					],
					[
						"real",
						"reallocateDown"
					],
					[
						"arr",
						"array_new"
					],
					[
						"get",
						"getCapacity"
					],
					[
						"nw",
						"new_f2\tstatement"
					],
					[
						"is",
						"isfile\tfunction"
					],
					[
						"de",
						"defaultdict\tclass"
					],
					[
						"load",
						"load_history\tfunction"
					],
					[
						"fp_",
						"fp_history\tparam"
					],
					[
						"main",
						"mainloop"
					],
					[
						"cre",
						"createTK\tfunction"
					],
					[
						"prfi",
						"profiler"
					],
					[
						"s_q",
						"s_qp_H\tstatement"
					],
					[
						"t_lr",
						"t_lr_H\tstatement"
					],
					[
						"t_q",
						"t_quad_fg\tstatement"
					],
					[
						"lr",
						"lr_fg_n\tstatement"
					],
					[
						"s",
						"s_quad_fg\tstatement"
					],
					[
						"dir",
						"dir_data\tparam"
					],
					[
						"gen",
						"genHaikuNick\tfunction"
					],
					[
						"FILE_SC",
						"FILE_SCORES\tstatement"
					],
					[
						"date",
						"datetime\tclass"
					],
					[
						"FILE",
						"FILE_NP_VALIDATE_IDX_FINAL\tstatement"
					],
					[
						"get_",
						"get_actual_predictions\tfunction"
					],
					[
						"idx_valid",
						"idx_validate\tstatement"
					],
					[
						"file_qu",
						"file_qualifying_blanc\tstatement"
					],
					[
						"idx_val",
						"idx_validate\tstatement"
					],
					[
						"idx_validate",
						"idx_validate_final\tstatement"
					],
					[
						"X_qu",
						"X_qualify\tstatement"
					],
					[
						"X_qua",
						"X_qualify_blanc\tstatement"
					],
					[
						"X_va",
						"X_validate\tstatement"
					],
					[
						"shar",
						"share_qualifying_final\tstatement"
					],
					[
						"app",
						"append\tfunction"
					],
					[
						"hig",
						"high_scores\tstatement"
					],
					[
						"high",
						"high_score\tstatement"
					],
					[
						"valida",
						"validate_file\tfunction"
					],
					[
						"W",
						"WebException\tclass"
					],
					[
						"array",
						"array_equal"
					],
					[
						"valid",
						"validate_user\tfunction"
					],
					[
						"get_us",
						"get_users\tfunction"
					],
					[
						"high_sc",
						"high_scores\tstatement"
					],
					[
						"get_user",
						"get_user_ranking\tfunction"
					],
					[
						"high_scores",
						"high_scores_user\tstatement"
					],
					[
						"hi",
						"high_score_user\tstatement"
					],
					[
						"high_sco",
						"high_score"
					],
					[
						"re",
						"reader\tfunction"
					],
					[
						"X",
						"X_act\tstatement"
					],
					[
						"cal",
						"calculate_rmse\tfunction"
					],
					[
						"DATA",
						"DIR_DATA\tstatement"
					],
					[
						"parse",
						"parse_file\tfunction"
					],
					[
						"X_vali",
						"X_validate_blanc\tstatement"
					],
					[
						"time",
						"timestamp\tstatement"
					],
					[
						"DAT",
						"DIR_DATA\tstatement"
					],
					[
						"dev",
						"device\tparam"
					],
					[
						"pyc",
						"pycutest\tmodule"
					],
					[
						"rang",
						"plot_ranges\tstatement"
					],
					[
						"qp",
						"qp2d\tstatement"
					],
					[
						"QP",
						"QP2D\tclass"
					],
					[
						"plo",
						"plot_ranges\tstatement"
					],
					[
						"latex",
						"latex_table\tstatement"
					],
					[
						"toH",
						"toHtmlString\tfunction"
					],
					[
						"iter_wor",
						"iter_worst_factor\tstatement"
					],
					[
						"iter_ma",
						"iter_master_factor\tstatement"
					],
					[
						"iter_m",
						"iter_master_factor\tstatement"
					],
					[
						"sol",
						"solved_f_vs_iter\tfunction"
					],
					[
						"rele",
						"rel_errs\tstatement"
					],
					[
						"rel_er",
						"rel_errs\tstatement"
					],
					[
						"csv",
						"csvdict_ipopt\tstatement"
					],
					[
						"solv",
						"solved_both\tstatement"
					],
					[
						"problem",
						"problem_name"
					],
					[
						"tab",
						"table_unsolved_ipopt_master\tfunction"
					],
					[
						"Ke",
						"KeyError\tclass"
					],
					[
						"solve",
						"solved_ipopt\tstatement"
					],
					[
						"stat",
						"stat_ipopt\tstatement"
					],
					[
						"h",
						"history\tstatement"
					],
					[
						"range",
						"ranges\tstatement"
					],
					[
						"eps",
						"eps_tsec\tstatement"
					],
					[
						"res",
						"result_header\tstatement"
					],
					[
						"head",
						"header_color\tstatement"
					],
					[
						"abs",
						"abs_errs\tstatement"
					],
					[
						"in",
						"indices\tstatement"
					],
					[
						"min",
						"minimum\tstatement"
					],
					[
						"buil",
						"build_header"
					],
					[
						"getPro",
						"getProblemProperties"
					],
					[
						"bul",
						"build_rows"
					],
					[
						"build",
						"build_row"
					],
					[
						"result",
						"result_header"
					],
					[
						"prob",
						"problem_header"
					],
					[
						"dic",
						"csv_dicts\tstatement"
					],
					[
						"class",
						"classmethod\tclass"
					],
					[
						"pro",
						"problems\tstatement"
					],
					[
						"geno",
						"genosolver\tmodule"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "[\n\t{ \"keys\": [\"ctrl+q\"], \"command\": \"exit\" },\n\n\t{ \"keys\": [\"ctrl+shift+n\"], \"command\": \"new_window\" },\n\t{ \"keys\": [\"ctrl+shift+w\"], \"command\": \"close_window\" },\n\t{ \"keys\": [\"ctrl+o\"], \"command\": \"prompt_open_file\" },\n\t{ \"keys\": [\"ctrl+shift+t\"], \"command\": \"reopen_last_file\" },\n\t{ \"keys\": [\"alt+o\"], \"command\": \"switch_file\", \"args\": {\"extensions\": [\"cpp\", \"cxx\", \"cc\", \"c\", \"hpp\", \"hxx\", \"hh\", \"h\", \"ipp\", \"inl\", \"m\", \"mm\"]} },\n\t{ \"keys\": [\"ctrl+n\"], \"command\": \"new_file\" },\n\t{ \"keys\": [\"ctrl+s\"], \"command\": \"save\" },\n\t{ \"keys\": [\"ctrl+shift+s\"], \"command\": \"prompt_save_as\" },\n\t{ \"keys\": [\"ctrl+f4\"], \"command\": \"close_file\" },\n\t{ \"keys\": [\"ctrl+w\"], \"command\": \"close\" },\n\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+b\"], \"command\": \"toggle_side_bar\" },\n\t{ \"keys\": [\"f11\"], \"command\": \"toggle_full_screen\" },\n\t{ \"keys\": [\"shift+f11\"], \"command\": \"toggle_distraction_free\" },\n\n\t{ \"keys\": [\"backspace\"], \"command\": \"left_delete\" },\n\t{ \"keys\": [\"shift+backspace\"], \"command\": \"left_delete\" },\n\t{ \"keys\": [\"ctrl+shift+backspace\"], \"command\": \"left_delete\" },\n\t{ \"keys\": [\"delete\"], \"command\": \"right_delete\" },\n\t{ \"keys\": [\"enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n\t{ \"keys\": [\"keypad_enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n\t{ \"keys\": [\"shift+keypad_enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n\n\t{ \"keys\": [\"ctrl+z\"], \"command\": \"undo\" },\n\t{ \"keys\": [\"ctrl+shift+z\"], \"command\": \"redo\" },\n\t{ \"keys\": [\"ctrl+y\"], \"command\": \"redo_or_repeat\" },\n\t{ \"keys\": [\"ctrl+u\"], \"command\": \"soft_undo\" },\n\t{ \"keys\": [\"ctrl+shift+u\"], \"command\": \"soft_redo\" },\n\n\t{ \"keys\": [\"shift+delete\"], \"command\": \"cut\" },\n\t{ \"keys\": [\"ctrl+insert\"], \"command\": \"copy\" },\n\t{ \"keys\": [\"shift+insert\"], \"command\": \"paste\" },\n\n\t// These two key bindings should replace the above three if you'd prefer\n\t// the traditional X11 behavior of shift+insert pasting from the primary\n\t// selection. The above CUA keys are the default, to match most GTK\n\t// applications.\n\t//{ \"keys\": [\"shift+insert\"], \"command\": \"paste\", \"args\": {\"clipboard\": \"selection\"} },\n\t//{ \"keys\": [\"shift+delete\"], \"command\": \"right_delete\" },\n\n\t{ \"keys\": [\"ctrl+x\"], \"command\": \"cut\" },\n\t{ \"keys\": [\"ctrl+c\"], \"command\": \"copy\" },\n\t{ \"keys\": [\"ctrl+v\"], \"command\": \"paste\" },\n\t{ \"keys\": [\"ctrl+shift+v\"], \"command\": \"paste_and_indent\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+v\"], \"command\": \"paste_from_history\" },\n\n\t{ \"keys\": [\"left\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": false} },\n\t{ \"keys\": [\"right\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true} },\n\t{ \"keys\": [\"up\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": false} },\n\t{ \"keys\": [\"down\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": true} },\n\t{ \"keys\": [\"shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true, \"extend\": true} },\n\t{ \"keys\": [\"shift+up\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"shift+down\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"ctrl+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false} },\n\t{ \"keys\": [\"ctrl+right\"], \"command\": \"move\", \"args\": {\"by\": \"word_ends\", \"forward\": true} },\n\t{ \"keys\": [\"ctrl+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"ctrl+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"word_ends\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"alt+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n\t{ \"keys\": [\"alt+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true} },\n\t{ \"keys\": [\"alt+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"alt+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"alt+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"alt+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} },\n\n\t{ \"keys\": [\"pageup\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": false} },\n\t{ \"keys\": [\"pagedown\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": true} },\n\t{ \"keys\": [\"shift+pageup\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"shift+pagedown\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bol\", \"extend\": false} },\n\t{ \"keys\": [\"end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eol\", \"extend\": false} },\n\t{ \"keys\": [\"shift+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bol\", \"extend\": true} },\n\t{ \"keys\": [\"shift+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eol\", \"extend\": true} },\n\t{ \"keys\": [\"ctrl+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bof\", \"extend\": false} },\n\t{ \"keys\": [\"ctrl+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eof\", \"extend\": false} },\n\t{ \"keys\": [\"ctrl+shift+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bof\", \"extend\": true} },\n\t{ \"keys\": [\"ctrl+shift+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eof\", \"extend\": true} },\n\n\t{ \"keys\": [\"ctrl+up\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": 1.0 } },\n\t{ \"keys\": [\"ctrl+down\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": -1.0 } },\n\n\t{ \"keys\": [\"ctrl+pagedown\"], \"command\": \"next_view\" },\n\t{ \"keys\": [\"ctrl+pageup\"], \"command\": \"prev_view\" },\n\n\t{ \"keys\": [\"ctrl+tab\"], \"command\": \"next_view_in_stack\" },\n\t{ \"keys\": [\"ctrl+shift+tab\"], \"command\": \"prev_view_in_stack\" },\n\n\t{ \"keys\": [\"ctrl+a\"], \"command\": \"select_all\" },\n\t{ \"keys\": [\"ctrl+shift+l\"], \"command\": \"split_selection_into_lines\" },\n\t{ \"keys\": [\"escape\"], \"command\": \"single_selection\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"num_selections\", \"operator\": \"not_equal\", \"operand\": 1 }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_panel\", \"args\": {\"cancel\": true},\n\t\t\"context\":\n\t\t[\n\t\t\t{ \"key\": \"panel_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_overlay\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"overlay_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_popup\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"popup_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_auto_complete\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": true} },\n\t{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": false},\n\t\t\"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_match\", \"operand\": \".*\\\\b[0-9]+$\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"replace_completion_with_next_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"reindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"indent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"next_field\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"commit_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\" }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\t\"} },\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.shift_tab_unindent\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^[\\t ]*\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"prev_field\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"ctrl+]\"], \"command\": \"indent\" },\n\t{ \"keys\": [\"ctrl+[\"], \"command\": \"unindent\" },\n\n\t{ \"keys\": [\"insert\"], \"command\": \"toggle_overwrite\" },\n\n\t{ \"keys\": [\"ctrl+l\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"line\"} },\n\t{ \"keys\": [\"ctrl+d\"], \"command\": \"find_under_expand\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+d\"], \"command\": \"find_under_expand_skip\" },\n\t{ \"keys\": [\"ctrl+shift+space\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"scope\"} },\n\t{ \"keys\": [\"ctrl+shift+m\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"brackets\"} },\n\t{ \"keys\": [\"ctrl+m\"], \"command\": \"move_to\", \"args\": {\"to\": \"brackets\"} },\n\t{ \"keys\": [\"ctrl+shift+j\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"indentation\"} },\n\t{ \"keys\": [\"ctrl+shift+a\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"tag\"} },\n\n\t{ \"keys\": [\"alt+.\"], \"command\": \"close_tag\" },\n\n\t{ \"keys\": [\"ctrl+alt+q\"], \"command\": \"toggle_record_macro\" },\n\t{ \"keys\": [\"ctrl+alt+shift+q\"], \"command\": \"run_macro\" },\n\n\t{ \"keys\": [\"ctrl+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line.sublime-macro\"} },\n\t{ \"keys\": [\"ctrl+shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line Before.sublime-macro\"} },\n\t{ \"keys\": [\"enter\"], \"command\": \"commit_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"ctrl+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n\t{ \"keys\": [\"ctrl+shift+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"command_palette\"} },\n\t{ \"keys\": [\"ctrl+alt+p\"], \"command\": \"prompt_select_workspace\" },\n\t{ \"keys\": [\"ctrl+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\n\t{ \"keys\": [\"ctrl+g\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\n\t{ \"keys\": [\"ctrl+;\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"#\"} },\n\t{ \"keys\": [\"f12\"], \"command\": \"goto_definition\" },\n\t{ \"keys\": [\"shift+f12\"], \"command\": \"goto_reference\" },\n\t{ \"keys\": [\"ctrl+shift+r\"], \"command\": \"goto_symbol_in_project\" },\n\t{ \"keys\": [\"alt+-\"], \"command\": \"jump_back\" },\n\t{ \"keys\": [\"alt+shift+-\"], \"command\": \"jump_forward\" },\n\t{ \"keys\": [\"alt+keypad_minus\"], \"command\": \"jump_back\" },\n\t{ \"keys\": [\"alt+shift+keypad_minus\"], \"command\": \"jump_forward\" },\n\n\t{ \"keys\": [\"ctrl+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": false} },\n\t{ \"keys\": [\"ctrl+shift+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": true} },\n\t{ \"keys\": [\"ctrl+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find\", \"reverse\": false} },\n\t{ \"keys\": [\"ctrl+h\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"replace\", \"reverse\": false} },\n\t{ \"keys\": [\"ctrl+shift+h\"], \"command\": \"replace_next\" },\n\t{ \"keys\": [\"f3\"], \"command\": \"find_next\" },\n\t{ \"keys\": [\"shift+f3\"], \"command\": \"find_prev\" },\n\t{ \"keys\": [\"ctrl+f3\"], \"command\": \"find_under\" },\n\t{ \"keys\": [\"ctrl+shift+f3\"], \"command\": \"find_under_prev\" },\n\t{ \"keys\": [\"alt+f3\"], \"command\": \"find_all_under\" },\n\t{ \"keys\": [\"ctrl+e\"], \"command\": \"slurp_find_string\" },\n\t{ \"keys\": [\"ctrl+shift+e\"], \"command\": \"slurp_replace_string\" },\n\t{ \"keys\": [\"ctrl+shift+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find_in_files\"} },\n\t{ \"keys\": [\"f4\"], \"command\": \"next_result\" },\n\t{ \"keys\": [\"shift+f4\"], \"command\": \"prev_result\" },\n\n\t{ \"keys\": [\"f6\"], \"command\": \"toggle_setting\", \"args\": {\"setting\": \"spell_check\"} },\n\t{ \"keys\": [\"ctrl+f6\"], \"command\": \"next_misspelling\" },\n\t{ \"keys\": [\"ctrl+shift+f6\"], \"command\": \"prev_misspelling\" },\n\n\t{ \"keys\": [\"ctrl+shift+up\"], \"command\": \"swap_line_up\" },\n\t{ \"keys\": [\"ctrl+shift+down\"], \"command\": \"swap_line_down\" },\n\n\t{ \"keys\": [\"ctrl+backspace\"], \"command\": \"delete_word\", \"args\": { \"forward\": false } },\n\t{ \"keys\": [\"ctrl+shift+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n\n\t{ \"keys\": [\"ctrl+delete\"], \"command\": \"delete_word\", \"args\": { \"forward\": true } },\n\t{ \"keys\": [\"ctrl+shift+delete\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\n\t{ \"keys\": [\"ctrl+/\"], \"command\": \"toggle_comment\", \"args\": { \"block\": false } },\n\t{ \"keys\": [\"ctrl+shift+/\"], \"command\": \"toggle_comment\", \"args\": { \"block\": true } },\n\n\t{ \"keys\": [\"ctrl+j\"], \"command\": \"join_lines\" },\n\t{ \"keys\": [\"ctrl+shift+d\"], \"command\": \"duplicate_line\" },\n\n\t{ \"keys\": [\"ctrl+`\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"console\", \"toggle\": true} },\n\n\t{ \"keys\": [\"alt+/\"], \"command\": \"auto_complete\" },\n\t{ \"keys\": [\"alt+/\"], \"command\": \"replace_completion_with_auto_complete\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": false },\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"ctrl+alt+shift+p\"], \"command\": \"show_scope_name\" },\n\n\t{ \"keys\": [\"f7\"], \"command\": \"build\" },\n\t{ \"keys\": [\"ctrl+b\"], \"command\": \"build\" },\n\t{ \"keys\": [\"ctrl+shift+b\"], \"command\": \"build\", \"args\": {\"select\": true} },\n\t{ \"keys\": [\"ctrl+break\"], \"command\": \"cancel_build\" },\n\n\t{ \"keys\": [\"ctrl+t\"], \"command\": \"transpose\" },\n\n\t{ \"keys\": [\"f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": false} },\n\t{ \"keys\": [\"ctrl+f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": true} },\n\n\t// Auto-pair quotes\n\t{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"$0\\\"\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"[\\\"a-zA-Z0-9_]$\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"${0:$SELECTION}\\\"\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"\\\"\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\"$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\n\t// Auto-pair single quotes\n\t{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'$0'\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"['a-zA-Z0-9_]$\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'${0:$SELECTION}'\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"'\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"'$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\n\t// Auto-pair brackets\n\t{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"($0)\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"(${0:$SELECTION})\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\")\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\($\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n\t\t]\n\t},\n\n\t// Auto-pair square brackets\n\t{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[$0]\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[${0:$SELECTION}]\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"]\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\[$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n\t\t]\n\t},\n\n\t// Auto-pair curly brackets\n\t{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{$0}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"{\"], \"command\": \"wrap_block\", \"args\": {\"begin\": \"{\", \"end\": \"}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"indented_block\", \"match_all\": true },\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{${0:$SELECTION}}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"}\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"enter\"], \"command\": \"auto_indent_tag\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"punctuation.definition.tag.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \">$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^</\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"auto_indent_tag\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"punctuation.definition.tag.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \">$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^</\", \"match_all\": true },\n\t\t]\n\t},\n\n\t{\n\t\t\"keys\": [\"alt+shift+1\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+2\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.5, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+3\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.33, 0.66, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+4\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.25, 0.5, 0.75, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+8\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 0.5, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+9\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 0.33, 0.66, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"alt+shift+5\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.5, 1.0],\n\t\t\t\"rows\": [0.0, 0.5, 1.0],\n\t\t\t\"cells\":\n\t\t\t[\n\t\t\t\t[0, 0, 1, 1], [1, 0, 2, 1],\n\t\t\t\t[0, 1, 1, 2], [1, 1, 2, 2]\n\t\t\t]\n\t\t}\n\t},\n\t{ \"keys\": [\"ctrl+1\"], \"command\": \"focus_group\", \"args\": { \"group\": 0 } },\n\t{ \"keys\": [\"ctrl+2\"], \"command\": \"focus_group\", \"args\": { \"group\": 1 } },\n\t{ \"keys\": [\"ctrl+3\"], \"command\": \"focus_group\", \"args\": { \"group\": 2 } },\n\t{ \"keys\": [\"ctrl+4\"], \"command\": \"focus_group\", \"args\": { \"group\": 3 } },\n\t{ \"keys\": [\"ctrl+5\"], \"command\": \"focus_group\", \"args\": { \"group\": 4 } },\n\t{ \"keys\": [\"ctrl+6\"], \"command\": \"focus_group\", \"args\": { \"group\": 5 } },\n\t{ \"keys\": [\"ctrl+7\"], \"command\": \"focus_group\", \"args\": { \"group\": 6 } },\n\t{ \"keys\": [\"ctrl+8\"], \"command\": \"focus_group\", \"args\": { \"group\": 7 } },\n\t{ \"keys\": [\"ctrl+9\"], \"command\": \"focus_group\", \"args\": { \"group\": 8 } },\n\t{ \"keys\": [\"ctrl+shift+1\"], \"command\": \"move_to_group\", \"args\": { \"group\": 0 } },\n\t{ \"keys\": [\"ctrl+shift+2\"], \"command\": \"move_to_group\", \"args\": { \"group\": 1 } },\n\t{ \"keys\": [\"ctrl+shift+3\"], \"command\": \"move_to_group\", \"args\": { \"group\": 2 } },\n\t{ \"keys\": [\"ctrl+shift+4\"], \"command\": \"move_to_group\", \"args\": { \"group\": 3 } },\n\t{ \"keys\": [\"ctrl+shift+5\"], \"command\": \"move_to_group\", \"args\": { \"group\": 4 } },\n\t{ \"keys\": [\"ctrl+shift+6\"], \"command\": \"move_to_group\", \"args\": { \"group\": 5 } },\n\t{ \"keys\": [\"ctrl+shift+7\"], \"command\": \"move_to_group\", \"args\": { \"group\": 6 } },\n\t{ \"keys\": [\"ctrl+shift+8\"], \"command\": \"move_to_group\", \"args\": { \"group\": 7 } },\n\t{ \"keys\": [\"ctrl+shift+9\"], \"command\": \"move_to_group\", \"args\": { \"group\": 8 } },\n\t{ \"keys\": [\"ctrl+0\"], \"command\": \"focus_side_bar\" },\n\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+up\"], \"command\": \"new_pane\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+shift+up\"], \"command\": \"new_pane\", \"args\": {\"move\": false} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+down\"], \"command\": \"close_pane\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+left\"], \"command\": \"focus_neighboring_group\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+right\"], \"command\": \"focus_neighboring_group\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+shift+left\"], \"command\": \"move_to_neighboring_group\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+shift+right\"], \"command\": \"move_to_neighboring_group\" },\n\n\t{ \"keys\": [\"alt+1\"], \"command\": \"select_by_index\", \"args\": { \"index\": 0 } },\n\t{ \"keys\": [\"alt+2\"], \"command\": \"select_by_index\", \"args\": { \"index\": 1 } },\n\t{ \"keys\": [\"alt+3\"], \"command\": \"select_by_index\", \"args\": { \"index\": 2 } },\n\t{ \"keys\": [\"alt+4\"], \"command\": \"select_by_index\", \"args\": { \"index\": 3 } },\n\t{ \"keys\": [\"alt+5\"], \"command\": \"select_by_index\", \"args\": { \"index\": 4 } },\n\t{ \"keys\": [\"alt+6\"], \"command\": \"select_by_index\", \"args\": { \"index\": 5 } },\n\t{ \"keys\": [\"alt+7\"], \"command\": \"select_by_index\", \"args\": { \"index\": 6 } },\n\t{ \"keys\": [\"alt+8\"], \"command\": \"select_by_index\", \"args\": { \"index\": 7 } },\n\t{ \"keys\": [\"alt+9\"], \"command\": \"select_by_index\", \"args\": { \"index\": 8 } },\n\t{ \"keys\": [\"alt+0\"], \"command\": \"select_by_index\", \"args\": { \"index\": 9 } },\n\n\t{ \"keys\": [\"f2\"], \"command\": \"next_bookmark\" },\n\t{ \"keys\": [\"shift+f2\"], \"command\": \"prev_bookmark\" },\n\t{ \"keys\": [\"ctrl+f2\"], \"command\": \"toggle_bookmark\" },\n\t{ \"keys\": [\"ctrl+shift+f2\"], \"command\": \"clear_bookmarks\" },\n\t{ \"keys\": [\"alt+f2\"], \"command\": \"select_all_bookmarks\" },\n\n\t{ \"keys\": [\"ctrl+shift+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Line.sublime-macro\"} },\n\n\t{ \"keys\": [\"alt+q\"], \"command\": \"wrap_lines\" },\n\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+u\"], \"command\": \"upper_case\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+l\"], \"command\": \"lower_case\" },\n\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+space\"], \"command\": \"set_mark\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+a\"], \"command\": \"select_to_mark\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+w\"], \"command\": \"delete_to_mark\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+x\"], \"command\": \"swap_with_mark\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+y\"], \"command\": \"yank\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+g\"], \"command\": \"clear_bookmarks\", \"args\": {\"name\": \"mark\"} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+c\"], \"command\": \"show_at_center\" },\n\n\t{ \"keys\": [\"ctrl++\"], \"command\": \"increase_font_size\" },\n\t{ \"keys\": [\"ctrl+=\"], \"command\": \"increase_font_size\" },\n\t{ \"keys\": [\"ctrl+-\"], \"command\": \"decrease_font_size\" },\n\n\t{ \"keys\": [\"alt+shift+w\"], \"command\": \"insert_snippet\", \"args\": { \"name\": \"Packages/XML/Snippets/long-tag.sublime-snippet\" } },\n\n\t{ \"keys\": [\"ctrl+shift+[\"], \"command\": \"fold\" },\n\t{ \"keys\": [\"ctrl+shift+]\"], \"command\": \"unfold\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+1\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 1} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+2\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 2} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+3\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 3} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+4\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 4} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+5\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 5} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+6\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 6} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+7\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 7} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+8\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 8} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+9\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 9} },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+0\"], \"command\": \"unfold_all\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+j\"], \"command\": \"unfold_all\" },\n\t{ \"keys\": [\"ctrl+k\", \"ctrl+t\"], \"command\": \"fold_tag_attributes\" },\n\n\t{ \"keys\": [\"context_menu\"], \"command\": \"context_menu\" },\n\n\t{ \"keys\": [\"alt+c\"], \"command\": \"toggle_case_sensitive\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"alt+r\"], \"command\": \"toggle_regex\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"alt+w\"], \"command\": \"toggle_whole_word\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"alt+a\"], \"command\": \"toggle_preserve_case\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t// Find panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Replace panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t\"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"ctrl+alt+enter\"], \"command\": \"replace_all\", \"args\": {\"close_panel\": true},\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Incremental find panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"hide_panel\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t\"context\": [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Find in Files panel key bindings\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\",\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find_in_files\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"ctrl+alt+enter\"], \"command\": \"replace_all\",\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find_in_files\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// HTML, XML close tag\n\t{ \"keys\": [\"/\"], \"command\": \"close_tag\", \"args\": { \"insert_slash\": true }, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"(text.html, text.xml) - string - comment\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \".*<$\", \"match_all\": true },\n\t\t\t{ \"key\": \"setting.auto_close_tags\" }\n\t\t]\n\t}\n]\n",
					"file": "/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
					"file_size": -1,
					"file_write_time": -1,
					"settings":
					{
						"buffer_size": 36630,
						"line_ending": "Unix",
						"read_only": true,
						"scratch": true
					}
				},
				{
					"file": "/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
					"settings":
					{
						"buffer_size": 19855,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packages in",
						"Package Control: Install Package"
					],
					[
						"packages instal",
						"Package Control: Install Package"
					],
					[
						"packages",
						"Package Control: Install Package"
					],
					[
						"Package Control: r",
						"Package Control: Remove Package"
					],
					[
						"Package Control: ",
						"Package Control: Remove Package"
					],
					[
						"Package Control: remove",
						"Package Control: Remove Package"
					]
				],
				"width": 515.0
			},
			"console":
			{
				"height": 130.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/matthias/projects/hash-maps/.gitignore",
				"/home/matthias/projects/agdml-lab-project/webinterface.py",
				"/home/matthias/projects/agdml-lab-project/readme.md",
				"/home/matthias/projects/agdml-lab-project/.gitignore",
				"/home/matthias/projects/nlp-solver/.gitignore",
				"/home/matthias/projects/CV/.gitignore",
				"/home/matthias/projects/agdml-lab-project/utils/createUserNames.py",
				"/home/matthias/projects/graphbisection/readme.md",
				"/home/matthias/projects/absnf/readme.md",
				"/home/matthias/projects/testsuite-nocoding/README.md",
				"/home/matthias/projects/optiview/readme.md",
				"/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/home/matthias/zb/src/todo.todo",
				"/home/matthias/zb/src/gpu_tf_lr_H.py",
				"/home/matthias/zb/src/utils.py",
				"/home/matthias/zb/src/plots.py",
				"/home/matthias/zb/src/run.sh",
				"/home/matthias/zb/src/slurm.txt",
				"/home/matthias/zb/src/submit.sh",
				"/home/matthias/zb/src/test.sh",
				"/home/matthias/zb/src/gpu_tf_mf_H.py",
				"/home/matthias/zb/src/gpu_tf_mf_fg.py",
				"/home/matthias/zb/src/gpu_tf_lr_fg.py",
				"/home/matthias/zb/code/tf_fully_connected.py",
				"/home/matthias/zb/src/res.txt",
				"/home/matthias/projects/hash-maps/bench/plot.py",
				"/home/matthias/projects/hash-maps/bench/variadic_templates.cc",
				"/home/matthias/projects/hash-maps/main.cc",
				"/home/matthias/tmp/dt.cpp",
				"/home/matthias/projects/hash-maps/tests/hash_map.cc",
				"/home/matthias/projects/hash-maps/CMakeLists.txt",
				"/home/matthias/projects/hash-maps/hash_map/hash_map.h",
				"/home/matthias/projects/hash-maps/bench/bench2.cc",
				"/home/matthias/projects/lda/project1/src/learnmodel.py",
				"/home/matthias/Orga/songs.txt",
				"/home/matthias/Orga/cook.txt",
				"/home/matthias/Orga/movies.txt",
				"/home/matthias/Orga/lda.todo",
				"/home/matthias/Orga/todo.todo",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/Orga/versicherungen-abos.txt",
				"/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.cc",
				"/home/matthias/projects/algoen/self_exercise-02/CMakeLists.txt",
				"/home/matthias/projects/algoen/self_exercise-02/fibonacci.h",
				"/home/matthias/projects/algoen/self_exercise-01/CMakeLists.txt",
				"/home/matthias/projects/test-runner/.gitlab-ci.yml",
				"/home/matthias/projects/algoen/self_exercise-02/.gitignore",
				"/home/matthias/Downloads/songs.txt",
				"/home/matthias/Downloads/youtube.sh",
				"/home/matthias/projects/codinginterviews/arraylist/readme.md",
				"/home/matthias/Orga/dis.txt",
				"/home/matthias/Orga/cuda_install.txt",
				"/home/matthias/projects/codinginterviews/hashtable/hashtable.cpp",
				"/home/matthias/projects/codinginterviews/tmp.cpp",
				"/home/matthias/projects/init/init.todo",
				"/home/matthias/projects/init/readme.md",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.h",
				"/home/matthias/projects/algoen/self_exercise-01/main.cc",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.h",
				"/home/matthias/projects/algoen/self_exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/CMakeLists.txt",
				"/home/matthias/projects/algoen/exercise-01/gemv.h",
				"/home/matthias/projects/algoen/exercise-01/gemv.cc",
				"/home/matthias/projects/algoen/exercise-01/README.md",
				"/home/matthias/projects/algoen/exercise-01/.gitlab-ci.yml",
				"/home/matthias/projects/hello_cmake/src/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/CMakeLists.txt",
				"/home/matthias/projects/codinginterviews/arraylist/main.cpp",
				"/home/matthias/projects/codinginterviews/arraylist/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/hello.cpp",
				"/home/matthias/projects/hello_cmake/hello.h",
				"/home/matthias/projects/hello_cmake/testmain.cpp",
				"/home/matthias/projects/hello_cmake/tests/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/src/CMakeLists.txt",
				"/home/matthias/projects/hello_cmake/main.cpp",
				"/home/matthias/projects/hello_cmake/CMakeLists.txt.old",
				"/home/matthias/projects/hello_cmake/thirdparty/catch/include/catch.hpp",
				"/home/matthias/projects/codinginterviews/arraylist/arraylist.tpp",
				"/home/matthias/projects/hello_cmake/catch.hpp",
				"/home/matthias/projects/nlp/a1/q2_sigmoid.py",
				"/home/matthias/projects/nlp/a1/q2_gradcheck.py",
				"/home/matthias/projects/calvhobbes/test.py",
				"/home/matthias/projects/nlp/a1/q2_neural.py",
				"/home/matthias/projects/nlp/a1/q1_softmax.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNQualify.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionMean.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionKNNTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/predictionBaseline.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrTrainData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/pCorrFullData.py",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/qualify.csv",
				"/home/matthias/projects/slt-final-project/reports_ss18/till späth/splitTrainTest.py",
				"/home/matthias/projects/codewars/c/decToBin.c",
				"/home/matthias/Orga/camping.txt",
				"/home/matthias/Orga/packliste.txt",
				"/home/matthias/projects/calvhobbes/show.py",
				"/home/matthias/projects/matrixCalculusPaper/code/pp.py",
				"/home/matthias/projects/codewars/c/decToBin.py",
				"/home/matthias/Orga/style.todo",
				"/home/matthias/Orga/wunschliste.txt",
				"/home/matthias/Orga/backup.txt",
				"/home/matthias/Orga/geschenke.txt",
				"/home/matthias/Orga/wardrobe.todo",
				"/home/matthias/Orga/wohnung.txt",
				"/home/matthias/Orga/music.txt",
				"/home/matthias/Orga/experimente.txt",
				"/home/matthias/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
				"/home/matthias/projects/AAAI2019/.gitignore",
				"/home/matthias/projects/AAAI2019/supplement.tex",
				"/home/matthias/projects/matrixCalculusPaper/code/utils.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots.py",
				"/home/matthias/projects/matrixCalculusPaper/code/plots_new.py",
				"/home/matthias/aws/matrixCalculusPaper/code/run.sh",
				"/media/matthias/6CEC-FFA4/OPENME.txt",
				"/home/matthias/Orga/todo_conflict-20180907-093316.txt",
				"/home/matthias/Orga/istrien.txt",
				"/home/matthias/aws/matrixCalculusPaper/code/plots_gpu.py",
				"/home/matthias/aws/matrixCalculusPaper/code/utils.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_mc_lr_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_pt_qp_fg.py",
				"/home/matthias/aws/matrixCalculusPaper/code/gpu_tf_qp_fg.py",
				"/home/matthias/Orga/todo.txt",
				"/home/matthias/projects/keras/convolution.py",
				"/home/matthias/projects/slt-final-project/README.md",
				"/home/matthias/projects/slt-final-project/webinterface/templates/documentation.html",
				"/home/matthias/projects/slt-final-project/webinterface/templates/tasks.html"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 136.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/matthias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 36630,
								"regions":
								{
								},
								"selection":
								[
									[
										36630,
										36630
									]
								],
								"settings":
								{
									"edit_settings_other_view_id": 36,
									"edit_settings_view": "base",
									"syntax": "Packages/JavaScript/JSON.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 1,
							"file": "/home/matthias/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 19855,
								"regions":
								{
								},
								"selection":
								[
									[
										19855,
										19855
									]
								],
								"settings":
								{
									"edit_settings_other_view_id": 35,
									"edit_settings_view": "user",
									"syntax": "Packages/JavaScript/JSON.sublime-syntax",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 48.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,24,640,532,1920,1080",
			"project": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"mas",
						"solver/master.csv"
					],
					[
						"master.csv",
						"solver/master.csv"
					],
					[
						"util",
						"solver/utils.py"
					],
					[
						"cre",
						"solver/create_result_table.py"
					],
					[
						"result",
						"solver/create_result_table.py"
					],
					[
						"ipop",
						"solver/ipopt.csv"
					],
					[
						"stat",
						"solver/statistics-table.py"
					],
					[
						"subs",
						"solver/subspace.py"
					],
					[
						"singl",
						"solver/single_problem.py"
					],
					[
						"table",
						"solver/create_result_table.py"
					],
					[
						"creat",
						"solver/create_result_table.py"
					],
					[
						"csv",
						"solver/csvmerger.py"
					],
					[
						"plot",
						"casual/plotter.py"
					],
					[
						"sol",
						"solver/solver.py"
					],
					[
						"sin",
						"solver/single_problem.py"
					],
					[
						"nl",
						"solver/nlp.py"
					],
					[
						"nlp",
						"solver/nlp.py"
					],
					[
						"solv",
						"solver/solver.py"
					],
					[
						"ut",
						"src/solver/utils.py"
					],
					[
						"cau",
						"solver/cauchy.py"
					],
					[
						"tm",
						"src/solver/tmp.py"
					],
					[
						"lbfgs",
						"src/lbfgsb.cpp"
					],
					[
						"augme",
						"src/augmentedLagrangian.cpp"
					],
					[
						"pygeno.pyx",
						"src/pygeno/pygeno.pyx"
					],
					[
						"pygenon",
						"src/pygeno/pygenonlp.cpp"
					],
					[
						"test",
						"optidb/test.py"
					],
					[
						"com",
						"pycutest/compiler.py"
					],
					[
						"cutest.",
						"pycutest/cutest.pyx"
					],
					[
						"too",
						"pycutest/tools.py"
					],
					[
						"problem",
						"pycutest/problem.py"
					],
					[
						"meta",
						"pycutest/meta/pycutestmeta.py"
					],
					[
						"pycu",
						"pycutest/pycutest.py"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 392.0
			},
			"selected_group": 1,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 438.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 216,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
